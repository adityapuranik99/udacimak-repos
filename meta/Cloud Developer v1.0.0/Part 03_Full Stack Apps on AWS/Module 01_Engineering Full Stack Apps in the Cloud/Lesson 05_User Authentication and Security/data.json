{
  "data": {
    "lesson": {
      "id": 842873,
      "key": "8ddf4441-88d0-4d94-b453-cb04787c8a4b",
      "title": "User Authentication and Security",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "Cloud systems come with a new set of challenges to only allow authorized users access to sensitive information. Learn common mistakes and modern techniques for dealing with security.\n",
      "lesson_type": "Classroom",
      "display_workspace_project_only": false,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "https://zips.udacity-data.com/8ddf4441-88d0-4d94-b453-cb04787c8a4b/842873/1556779034237/User+Authentication+and+Security+Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "https://zips.udacity-data.com/8ddf4441-88d0-4d94-b453-cb04787c8a4b/842873/1556779025560/User+Authentication+and+Security+Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 842874,
          "key": "0e1981d6-99ca-4a2f-aa8d-be1bd0c12ad7",
          "title": "Basic Security and User Auth",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "0e1981d6-99ca-4a2f-aa8d-be1bd0c12ad7",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 900160,
              "key": "4941d93f-18e7-442e-a44a-bfa415d67d81",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Basic Security and User Auth",
              "instructor_notes": ""
            },
            {
              "id": 843309,
              "key": "96a8362b-fdd9-4eaa-a80c-4c3bc4bb1475",
              "title": "CloudENG C2 L5 N02.1 Security And User Auth",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "mWvhQT1-HB4",
                "china_cdn_id": "mWvhQT1-HB4.mp4"
              }
            },
            {
              "id": 900161,
              "key": "b32e2f40-a543-4e7d-a05f-6f07047da91c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Storing and Using Passwords",
              "instructor_notes": ""
            },
            {
              "id": 845537,
              "key": "752dab46-ee63-480a-a4ec-3c6b4e5ae8f6",
              "title": "CloudENG C2 L5 N02.2 Security And User Auth",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "ggvDK7MXCV8",
                "china_cdn_id": "ggvDK7MXCV8.mp4"
              }
            },
            {
              "id": 843493,
              "key": "09f8c3a8-197d-4bd9-bf02-434c0f6705d3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Even big companies mess up security. \n## Here are some examples:\n1. **Facebook**. In March 2019, it was revealed that over 20,000 employees had access to plain text user passwords. Thankfully, it believed there was no malice resulting from this flubup. [Read More](https://www.theverge.com/2019/3/21/18275837/facebook-plain-text-password-storage-hundreds-millions-users)\n\n2. **Large Power Utility**. Discovered in February 2019. They'll even email you the plain text password - how convenient [Read More](https://arstechnica.com/tech-policy/2019/02/plain-wrong-millions-of-utility-customers-passwords-stored-in-plain-text/)\n\n3. **500px**. In mid-2018, user accounts and password hashes (including MD5 hashes) were compromised from this trendy design site. [Read More](https://support.500px.com/hc/en-us/articles/360017752493-Security-Issue-February-2019-FAQ)\n\nThe site [haveibeenpwned.com](https://haveibeenpwned.com/) has many other documented mistakes and is worth a browse.",
              "instructor_notes": ""
            },
            {
              "id": 900162,
              "key": "b4b5602f-18f3-4e6e-873e-41e08d3b2e9f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Improving our Password Storage",
              "instructor_notes": ""
            },
            {
              "id": 845538,
              "key": "c0d4d375-ddef-4c67-b092-b473dd2806de",
              "title": "CloudENG C2 L5 N02.3 Security And User Auth",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "_AZSB3tREMo",
                "china_cdn_id": "_AZSB3tREMo.mp4"
              }
            },
            {
              "id": 900163,
              "key": "c96ddda4-28bb-4123-aa85-305533ee4be3",
              "title": "Current Gold Standard",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "c96ddda4-28bb-4123-aa85-305533ee4be3",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What is the Current Gold Standard (or best method) of storing passwords",
                "answers": [
                  {
                    "id": "a1563030334463",
                    "text": "As plain text",
                    "is_correct": false
                  },
                  {
                    "id": "a1563030353952",
                    "text": "As encrypted strings",
                    "is_correct": false
                  },
                  {
                    "id": "a1563030363362",
                    "text": "As MD5 hashed strings",
                    "is_correct": false
                  },
                  {
                    "id": "a1563030370384",
                    "text": "As salted, hashed strings using bcrypt",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 843494,
              "key": "c0bb16a6-2975-427d-899e-b5b73815b481",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Final Thoughts on Security\n",
              "instructor_notes": ""
            },
            {
              "id": 843312,
              "key": "1564cf25-25db-45a7-b873-5877c8813150",
              "title": "CloudENG C2 L5 N02.4 Security And User Auth -Wrap Up",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "9mKtPRBStYQ",
                "china_cdn_id": "9mKtPRBStYQ.mp4"
              }
            },
            {
              "id": 843495,
              "key": "664c4a90-4d6a-40a5-92d0-f3d30cce854e",
              "title": "Security Sanity Check",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "664c4a90-4d6a-40a5-92d0-f3d30cce854e",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "True or False: It's a good idea to store passwords as plain text because it is fast.",
                "answers": [
                  {
                    "id": "a1555519608652",
                    "text": "True",
                    "is_correct": false
                  },
                  {
                    "id": "a1555519642061",
                    "text": "False",
                    "is_correct": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 843662,
          "key": "a8ff1c09-40d7-4d5c-8068-0b63f2546516",
          "title": "Tips to Follow Along",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "a8ff1c09-40d7-4d5c-8068-0b63f2546516",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 843663,
              "key": "76f151c7-25f0-433a-ae28-25569874a25f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Adding Authentication\n\nIn this lesson, we'll be adding a new feature to our server. Each concept will build on prior steps so make sure you're comfortable before moving forward.\n\n## Git Process\nIt may be good practice to branch off your `dev` branch with a feature branch for `f-auth`. This way you have an easy way to go back in time to see what you've changed.\n\n## Running the Server\nDon't forget, you can run the server in developer mode by running `npm run dev` in the terminal. ",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 842876,
          "key": "812639f6-b054-4def-9fab-8fcd84445142",
          "title": "Implementing Salted Hashed Passwords",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "812639f6-b054-4def-9fab-8fcd84445142",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 843510,
              "key": "761b8ef1-3ba0-439e-ba91-fcfa1427b438",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Using bcrypt to salt, hash, and compare\nWe'll be using the [bcrypt](https://www.npmjs.com/package/bcrypt) library to perform these functions. Check out the bcrypt docs for some more information: [https://www.npmjs.com/package/bcrypt](https://www.npmjs.com/package/bcrypt)",
              "instructor_notes": ""
            },
            {
              "id": 843407,
              "key": "884a7e99-24f6-4bd8-a43a-7b409dc61499",
              "title": "CloudENG C2 L5 N03.1 Implementing Salted Hashed Passwords",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "R72M-p1H1As",
                "china_cdn_id": "R72M-p1H1As.mp4"
              }
            },
            {
              "id": 845749,
              "key": "e70c9c8f-ba35-4b2e-9349-8e66ce9d8882",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## BCrypt Clarification \n\n**Salt Rounds**: the password is passed through the salted hashing function, and the output is again passed through the hashing function in a loop.  The more times we iterate on the hashing function, the more we can guard against brute force attacks that try to guess the password.  The salt rounds decide how many times to go through this loop.  Settings salt rounds to 10 means we iterate on this hashing function 2^10 times.\n\n**Comparing Passwords**: When you're using the `bcrypt.compare` method, it may appear that the salt is ignored. However, if you look closely at the example outputs in the video above, it is clear that the salt is actually prepended to the hash which we are using in the compare method. In other words, when we save the hash in our database - it is storing _both_ the salt and the resulting hash as one value. Then, when comparing the plain text password, the stored salt and hash are split and the salt is used to produce the new hash, which is ultimately what is being compared.",
              "instructor_notes": ""
            },
            {
              "id": 845540,
              "key": "8f285356-5d5a-493f-8ea3-e18126efd81b",
              "title": "CloudENG C2 L5 N03.2 Implementing Salted Hashed Passwords",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "FwIDMy3mcto",
                "china_cdn_id": "FwIDMy3mcto.mp4"
              }
            },
            {
              "id": 843508,
              "key": "ecd944fb-e35f-482c-aca3-db7c5a4541ab",
              "title": "Try using bcrypt to generate salted hashed passwords",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "ecd944fb-e35f-482c-aca3-db7c5a4541ab",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Complete the generatePassword method",
                "Complete the comparePassword method"
              ],
              "positive_feedback": "Awesome, using bcrypt is a quick way to implement salted hashed passwords but don't forget the rest of our security concerns!",
              "video_feedback": null,
              "description": "Complete the method stubs in `src/controllers/v0/users/routes/auth.router.ts` using the code learned in this concept"
            }
          ]
        },
        {
          "id": 843409,
          "key": "e1c3e606-a640-42db-8ef1-84ec176eaca8",
          "title": "bcrypt Implementation Solution",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "e1c3e606-a640-42db-8ef1-84ec176eaca8",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 900164,
              "key": "24554dc0-4d0c-4a07-964c-74f498b2731b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# bcrypt Implementation Solution Walkthrough",
              "instructor_notes": ""
            },
            {
              "id": 843410,
              "key": "bcb75c18-be5c-4ba9-9b79-52bf05b1be0c",
              "title": "CloudENG C2 L5 N04  Bcrypt Implementation Solution",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "1WApgcSvCb8",
                "china_cdn_id": "1WApgcSvCb8.mp4"
              }
            }
          ]
        },
        {
          "id": 842875,
          "key": "27a4851f-f9a1-4e10-b91e-22059a0d7ab6",
          "title": "Storing Passwords on our Clients",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "27a4851f-f9a1-4e10-b91e-22059a0d7ab6",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 843501,
              "key": "9d1b683e-6791-4e5b-96a1-4e3efede929f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Sessions, JWTs, and Environment Variables\nOur client can be a web browser or another server. In either of these cases, we need to send some authentication information along with each request.\n\nOn our web browser, this is most commonly performed by storing some kind of credentials in something like the [localstorage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage) which allows us to store information for a specific site in a key-value store. JSON Web Tokens are one type of credential that can be stored locally in this fashion.\n\nOn our servers, we'll usually want to use something like an environment variable. This is a variable which is accessible within that instance and only that instance.",
              "instructor_notes": ""
            },
            {
              "id": 843394,
              "key": "e83d02e1-025d-4b4e-a6e5-371f352bfb36",
              "title": "CloudENG C2 L5 N05.1 Storing Passwords On Our Clients",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "lTEqUEyOmV4",
                "china_cdn_id": "lTEqUEyOmV4.mp4"
              }
            },
            {
              "id": 900165,
              "key": "deb2b16c-d835-47c5-8906-114801bf0671",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## JSON Web Tokens",
              "instructor_notes": ""
            },
            {
              "id": 845541,
              "key": "e87faf6f-b6fb-4f72-a729-996bd6bb4336",
              "title": "CloudENG C2 L5 N05.2 Storing Passwords On Our Clients",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "tOC98yzTPdw",
                "china_cdn_id": "tOC98yzTPdw.mp4"
              }
            },
            {
              "id": 843497,
              "key": "c34bb202-2fac-49a2-90fe-fe596f15bc48",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Solidify your understanding on [jwt.io](https://jwt.io)\nVisit the site and play with JSON Web Tokens at [jwt.io](https://jwt.io)",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 842877,
          "key": "572ce5a7-e74d-45ce-9136-3386df19fd33",
          "title": "Implementing JWTs in Node",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "572ce5a7-e74d-45ce-9136-3386df19fd33",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 900166,
              "key": "8be670dd-bedb-4ed9-b04e-ab346381efea",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Implementing JWTs in Node",
              "instructor_notes": ""
            },
            {
              "id": 843411,
              "key": "496779a0-d662-4629-b63e-414685e4fec3",
              "title": "CloudENG C2 L5 N06.1 Implementing JWTs In Node",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "7wPAEHTNmNM",
                "china_cdn_id": "7wPAEHTNmNM.mp4"
              }
            },
            {
              "id": 845974,
              "key": "c4ff49e0-5171-405a-ac47-78b639cc77fe",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Requiring Auth to Restrict Endpoint Usage\nIn the next video, we'll be calling our requireAuth method to validate the JWT is in the request authorization header. Before continuing, it's recommended you read this [express resource](https://expressjs.com/en/guide/writing-middleware.html) on writing middleware to clarify this concept.\n\nEach protected endpoint adds a middleware function `requireAuth` which is defined in the `auth.router.ts` file. This method will check if the authorization header exists and is a valid JWT. If yes, it allows the endpoint to continue processing. If no, it rejects the request and sends appropriate HTTP status codes.",
              "instructor_notes": ""
            },
            {
              "id": 845542,
              "key": "3b5f59d4-886a-4d1d-937d-66c141064c3c",
              "title": "CloudENG C2 L5 N06.2 Implementing JWTs In Node",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "U4NzgrCRS1w",
                "china_cdn_id": "U4NzgrCRS1w.mp4"
              }
            },
            {
              "id": 900167,
              "key": "6ddf8470-93a0-4e09-a19e-5fa4a1c7c2a4",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Unstubbing the Requires Auth Method",
              "instructor_notes": ""
            },
            {
              "id": 845543,
              "key": "e4c5f521-abd5-4fad-a9b6-ba1a4e0ef23c",
              "title": "CloudENG C2 L5 N06.3 Implementing JWTs In Node",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "VV2lerBlUi8",
                "china_cdn_id": "VV2lerBlUi8.mp4"
              }
            },
            {
              "id": 843514,
              "key": "cc2eed16-da1d-47df-8cf2-62db8351b4da",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "> *note*: in the `config/config.ts` file we see plaintext variables. It is better practice to store these variables as environment variables accessed by `process.env.VARIABLE_NAME`. This may not have been clear, but the jwt secret is a secret. This allows the server to encrypt and decrypt JWTs. If it is compromised, the person with the secret can generate valid JWTs with whatever payload they want. Each environment should have it's own secret and care should be taken to ensure it remains secret.",
              "instructor_notes": ""
            },
            {
              "id": 843660,
              "key": "286c3f22-0178-44a8-8d28-bb0367b79693",
              "title": "Follow along to implement JWTs",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "286c3f22-0178-44a8-8d28-bb0367b79693",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Complete the JWT stubs"
              ],
              "positive_feedback": "Great job!",
              "video_feedback": null,
              "description": ""
            }
          ]
        },
        {
          "id": 843661,
          "key": "95c62156-8770-4f4e-b80d-46fdf15915c6",
          "title": "Deploying Changes",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "95c62156-8770-4f4e-b80d-46fdf15915c6",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 900168,
              "key": "f6cdcbc4-31c7-447b-b5ff-368c149318cf",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Deploying Changes to Elastic Beanstalk",
              "instructor_notes": ""
            },
            {
              "id": 845545,
              "key": "2b93440b-b918-4c36-8f85-1d04ddfb1547",
              "title": "CloudENG C2 L5 N08  Deploying",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "TK9M1HYB0SI",
                "china_cdn_id": "TK9M1HYB0SI.mp4"
              }
            },
            {
              "id": 843665,
              "key": "edb1fc8b-b156-4818-8fa4-75863d208209",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Integrate Changes in Git\nIf you've been following the Git process, create an merge a pull request to integrate your stable feature branch with dev. Keep in mind, if this was a real project, this is when you'd want to make sure your system is passing unit and integration tests, and conduct a peer code review.\n\n## Build from Source\nTo create fresh build artifacts to deploy run:\n```bash\nnpm run build\n```\nIf you recall, this will create a new artifact to run on the cloud server at `www/Archive.zip`.\n\n## Deploy to the Cloud\nOnce built, you can deploy changes to the elastic beanstalk instance by running:\n```bash\neb deploy\n```\n\nThis will upload the new code and restart the running instances!",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 845546,
          "key": "0d0f8f9d-7d1e-4a4d-85fe-8d2af9c26a9a",
          "title": "Closing Tips on Security",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "0d0f8f9d-7d1e-4a4d-85fe-8d2af9c26a9a",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 900169,
              "key": "1d6029f7-6ca9-46a5-81ce-eb3536ed58e6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Closing Tips on Security",
              "instructor_notes": ""
            },
            {
              "id": 845547,
              "key": "97adf4f5-a4ca-4277-81ef-9bd38ea0edc3",
              "title": "CloudENG C2 L5 N09  Closing Tips On Security",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "7A0xknBAkIY",
                "china_cdn_id": "7A0xknBAkIY.mp4"
              }
            },
            {
              "id": 845975,
              "key": "fab8d490-3fdc-4266-b924-07836e0cf95a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Examples of Good Security Policies\n- [NPM](https://www.npmjs.com/policies/security)\n- [Nylas](https://www.nylas.com/security/)\n- [AWS](https://aws.amazon.com/security/)",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 842880,
          "key": "11bedd39-a2f4-4e38-9a35-cca4af8bd6f0",
          "title": "Lesson Recap",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "11bedd39-a2f4-4e38-9a35-cca4af8bd6f0",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 845548,
              "key": "da092b47-72d4-409e-ac16-8a48d38bb66b",
              "title": "CloudENG C2 L5 N10  Lesson Recap",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "kJ3aTW2DGo4",
                "china_cdn_id": "kJ3aTW2DGo4.mp4"
              }
            },
            {
              "id": 845976,
              "key": "9be84eb5-8557-48bc-b78d-eafc777a3636",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Some Resources to Stay On Point:\n- [owasp.org Top 10](https://www.owasp.org/index.php/OWASP_Top_Ten_Cheat_Sheet)\n- [npm auditing](https://docs.npmjs.com/auditing-package-dependencies-for-security-vulnerabilities)\n- [github security alerts](https://help.github.com/en/articles/about-security-alerts-for-vulnerable-dependencies)",
              "instructor_notes": ""
            }
          ]
        }
      ]
    }
  }
}