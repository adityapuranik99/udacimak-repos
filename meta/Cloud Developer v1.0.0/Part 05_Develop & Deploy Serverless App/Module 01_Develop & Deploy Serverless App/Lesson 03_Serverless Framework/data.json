{
  "data": {
    "lesson": {
      "id": 858201,
      "key": "f0d2e109-7647-4660-b88e-862551411d33",
      "title": "Serverless Framework",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "In this lesson you will be introduced to the framework for Serverless and the various API we will be using.",
      "lesson_type": "Classroom",
      "display_workspace_project_only": false,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "https://zips.udacity-data.com/f0d2e109-7647-4660-b88e-862551411d33/858201/1581981707103/Serverless+Framework+Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "https://zips.udacity-data.com/f0d2e109-7647-4660-b88e-862551411d33/858201/1581981698393/Serverless+Framework+Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 858186,
          "key": "b4c614f9-0444-4a98-8ad7-7263d0525d9d",
          "title": "Serverless Framework",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "b4c614f9-0444-4a98-8ad7-7263d0525d9d",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 858121,
              "key": "e1df6b6a-6900-49c4-a883-5996f30b7672",
              "title": "ND9990 L03 A01 Where Are We Now- V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "t0RM4_xdsQM",
                "china_cdn_id": "t0RM4_xdsQM.mp4"
              }
            }
          ]
        },
        {
          "id": 858200,
          "key": "db3a0fb5-e7b8-4012-aafd-b52b2e1d3bf9",
          "title": "Serverless Frameworks: Introduction",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "db3a0fb5-e7b8-4012-aafd-b52b2e1d3bf9",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 858154,
              "key": "1e3cc17f-3a43-4e39-8073-de134b4ab510",
              "title": "ND9990 L03 A02 Serverless Frameworks",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "47It5P6x5Ew",
                "china_cdn_id": "47It5P6x5Ew.mp4"
              }
            },
            {
              "id": 983034,
              "key": "52de182a-d23d-4839-9087-f52cf5dea685",
              "title": "Serverless Framework",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Serverless Framework\n\nServerless Framework is an Open Source project, but the company that works on it also provides a paid [Pro Edition](https://serverless.com/pricing/).\n",
              "instructor_notes": ""
            },
            {
              "id": 858142,
              "key": "7a673f81-ed42-489e-813f-e2b1fd84022f",
              "title": "ND9990 L03 A03 Why Serverless Framework",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "jJ83bLpX10o",
                "china_cdn_id": "jJ83bLpX10o.mp4"
              }
            }
          ]
        },
        {
          "id": 858188,
          "key": "4e749b31-3614-42c1-a20f-27b2ce4a8956",
          "title": "YAML",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "4e749b31-3614-42c1-a20f-27b2ce4a8956",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 858161,
              "key": "b94ef1b1-4ea0-4052-a4fd-389f54fb2673",
              "title": "ND9990 L03 A04 YAML Introduction",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "LV82xf40kG0",
                "china_cdn_id": "LV82xf40kG0.mp4"
              }
            },
            {
              "id": 859487,
              "key": "679ff5f7-5e98-478b-a741-8c55f3228f05",
              "title": "Untitled",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# YAML\n\nIf you are new to YAML, here is a useful link to a blog on YAML. [YAML tutorial](https://rollout.io/blog/yaml-tutorial-everything-you-need-get-started/)\n\nHere is a free tool that was mentioned in the video that can convert YAML code to JSON and vice versa: https://www.json2yaml.com/\n\nYAML example:\n\n```yaml\ncomplex:\n  nested:\n    key1: value1\n    key2: value2\n  anotherNested:\n    key: value\nlist:\n  - 1\n  - 2\n  - 3\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 858196,
          "key": "10d5fd67-1825-448d-9caf-75530b9d05f7",
          "title": "Serverless Frameworks",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "10d5fd67-1825-448d-9caf-75530b9d05f7",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 858146,
              "key": "99de041f-8cef-49ce-8c8c-0acd334aa26e",
              "title": "ND9990 L03 A05 Serverless Framework Concept",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "AXNh4FZmb40",
                "china_cdn_id": "AXNh4FZmb40.mp4"
              }
            },
            {
              "id": 858126,
              "key": "3d9f5c2d-9435-410c-a43d-7b5f9496dcdf",
              "title": "ND9990 L03 A06 Serverless Project Structure V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "s9VCC-TTlCk",
                "china_cdn_id": "s9VCC-TTlCk.mp4"
              }
            },
            {
              "id": 859667,
              "key": "9320da57-1f08-49a0-9fa5-b1abac496408",
              "title": "Untitled",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "<h2>Serverless Project Structure</h2>\n/node_modules\n  - plugins, prod. and dev. dependencies \n\n/src\n  - function.js\n\nserverless.yml\n\npackage.json\n\npackage-lock.json\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 983045,
          "key": "e63d2f10-86df-4e8f-b58a-4f89a0aaf2a3",
          "title": "Serverless Framework Application",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "e63d2f10-86df-4e8f-b58a-4f89a0aaf2a3",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 858143,
              "key": "11c1ff41-c64b-49d6-8b6e-ea6237d0deea",
              "title": "ND9990 L03 A07 Serverless.Yml Structure",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "lgPww9S4soI",
                "china_cdn_id": "lgPww9S4soI.mp4"
              }
            },
            {
              "id": 859668,
              "key": "4441c9b8-8153-42e4-8ceb-f5a1716a02f3",
              "title": "Untitled",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "#  Serverless Plugins\n\nServerless framework's functionality can be extended using dozens of plugins developed for it. During the course we will use some of the most popular plugins, and you will see when and how to use them.\n\n<ul>\n<li>When you are looking for a plugin for your project you can use the [plugins catalog](https://serverless.com/plugins/) on the Serverless Framework website.</li>\n<li>If you can't find a plugin that would fit your needs, you can always implement your own. You can start with [this guide](https://serverless.com/framework/docs/providers/aws/guide/plugins#writing-plugins) if you want to explore this option.</li></ul>",
              "instructor_notes": ""
            },
            {
              "id": 858133,
              "key": "baa9eeaf-74d0-42b0-b6b2-ff458161aefd",
              "title": "ND9990 L03 A08 Defining Functions",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "dccldLeVyh8",
                "china_cdn_id": "dccldLeVyh8.mp4"
              }
            },
            {
              "id": 983037,
              "key": "556c363e-85c8-4d65-8d93-d9d182fde2a0",
              "title": "Serverless Framework AWS Events",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Serverless Framework Events\n\nIf you want to learn more, you can find a full list of events that Serverless Framework supports in the [official documentation](https://serverless.com/framework/docs/providers/aws/events/apigateway/). It provides examples for every event they support and describe all parameters it supports.",
              "instructor_notes": ""
            },
            {
              "id": 858658,
              "key": "c5dbde71-5dd2-4675-afbc-d71e79f94fda",
              "title": "Application deployment",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "c5dbde71-5dd2-4675-afbc-d71e79f94fda",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "How Serverless framework is deploying an application",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "Relies on CloudFormation service to create all resources",
                    "is_correct": true
                  },
                  {
                    "id": "rbk2",
                    "text": "Generates a script that a user has to execute to deploy an application",
                    "is_correct": false
                  },
                  {
                    "id": "rbk3",
                    "text": "Calls APIs of AWS services to create resources for a serverless application",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 1005244,
              "key": "1c733b32-aecd-4bff-862a-802539555fc3",
              "title": "Quiz: Function definition",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "1c733b32-aecd-4bff-862a-802539555fc3",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "\nGiving the following definition of a function definition, match configuration options with their values: \n\n```yml\nfunctions:\n  createUser:\n    handler: src/functions/createUserHandler.handler\n    events:\n      - http:\n          path: users\n          method: post\n```\n"
                },
                "concepts_label": "Configuration option",
                "answers_label": "Value",
                "concepts": [
                  {
                    "text": "Event type",
                    "correct_answer": {
                      "id": "a1583990867556",
                      "text": "HTTP"
                    }
                  },
                  {
                    "text": "URL Path",
                    "correct_answer": {
                      "id": "a1583990934053",
                      "text": "users"
                    }
                  },
                  {
                    "text": "HTTP method",
                    "correct_answer": {
                      "id": "a1583990934944",
                      "text": "POST"
                    }
                  },
                  {
                    "text": "Filename",
                    "correct_answer": {
                      "id": "a1583990936194",
                      "text": "src/functions/createUserHandler.ts"
                    }
                  },
                  {
                    "text": "Name of an exported function",
                    "correct_answer": {
                      "id": "a1583990954412",
                      "text": "handler"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1583990867556",
                    "text": "HTTP"
                  },
                  {
                    "id": "a1583990934944",
                    "text": "POST"
                  },
                  {
                    "id": "a1583991028130",
                    "text": "PUT"
                  },
                  {
                    "id": "a1583990936194",
                    "text": "src/functions/createUserHandler.ts"
                  },
                  {
                    "id": "a1583990934053",
                    "text": "users"
                  },
                  {
                    "id": "a1583990954412",
                    "text": "handler"
                  },
                  {
                    "id": "a1583991020412",
                    "text": "SNS"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 858187,
          "key": "d4b661d6-b496-45d8-ae57-4d84d4d680ef",
          "title": "CloudFormation",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "d4b661d6-b496-45d8-ae57-4d84d4d680ef",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 858137,
              "key": "e40cf230-d46a-43f2-9b77-a47d9a4ced76",
              "title": "ND9990 L03 A09 Cloudformation V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "0UGN6a5h1JU",
                "china_cdn_id": "0UGN6a5h1JU.mp4"
              }
            },
            {
              "id": 983036,
              "key": "9a50b781-3dab-4d2b-abe7-e24933b84f5c",
              "title": "CloudFormation",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "CloudFormation is a services for creation and management of AWS resources\n\nCloudFormation allows us to \n\n* Write YAML/JSON config file\n* Changes state of AWS resources\n* Version control the infrastructure\n\nCloudFormation is free and we only need to pay for created resources.\n",
              "instructor_notes": ""
            },
            {
              "id": 858135,
              "key": "5da5088b-776e-4a89-87c1-125a7525880a",
              "title": "ND9990 L03 A10 Cloudformation Resources",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "FrMwTvZL1_4",
                "china_cdn_id": "FrMwTvZL1_4.mp4"
              }
            },
            {
              "id": 983035,
              "key": "b0f054d7-ceae-4046-a45c-3f656aad4d5d",
              "title": "CloudFormation Resources",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# CloudFormation Resources\n\nAWS documentation provides reference for all resource types CloudFormation support: [AWS Resource and Property Types Reference](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html).\n\nMost of AWS resources can be created with CloudFormation, but in some rare cases you may encounter an AWS resource that is not supported by CloudFormation. In this case you would have to use AWS API, AWS CLI or AWS dashboard.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 983044,
          "key": "1c913a99-b3a3-4454-843f-ac5f065cad02",
          "title": "Using Serverless Framework",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "1c913a99-b3a3-4454-843f-ac5f065cad02",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 858129,
              "key": "013089d3-f1cd-430a-9298-97033da11863",
              "title": "ND9990 L03 A11 Using Serverless Framework",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "3Fk6X0wOQRY",
                "china_cdn_id": "3Fk6X0wOQRY.mp4"
              }
            },
            {
              "id": 983033,
              "key": "03e478b2-6de9-4c75-88e6-9383f1812bbb",
              "title": "Serverless Framework commands",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "**INSTALL**\n\n```sh\nnpm install -g serverless\n```\n\n**CREATE PROJECT**\n\n```sh\nserverless create --template aws-nodejs-typescript --path folder-name\n```\n\n**INSTALL PLUGIN**\n\n```\nnpm install plugin-name --save-dev\n```\n\n**DEPLOY PROJECT**\n\n```\nsls deploy -v\n```\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 858198,
          "key": "18fa7384-f8f9-4f6b-a026-a7e07d246671",
          "title": "Demo:Serverless Template",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "18fa7384-f8f9-4f6b-a026-a7e07d246671",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 858156,
              "key": "e3dec1d7-9173-4ac2-b96f-bb8d3c2482be",
              "title": "ND9990 L03 A12 Demo - Install Serverless Framework",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "DfJ65SXUYPA",
                "china_cdn_id": "DfJ65SXUYPA.mp4"
              }
            },
            {
              "id": 966249,
              "key": "26014b33-7c5e-452d-9ade-0a6fd036ba90",
              "title": "Untitled",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "1. Install serverless:\n```\nnpm install -g serverless\n```\n\n\n2.  Set up a new user in IAM named \"serverless\" and save the access key and secret key.\n\n\n3. Configure serverless to use the AWS credentials you just set up:\n```bash\nsls config credentials --provider aws --key YOUR_ACCESS_KEY --secret YOUR_SECRET_KEY --profile serverless\n```\n",
              "instructor_notes": ""
            },
            {
              "id": 858128,
              "key": "fcfa5170-d830-4fa5-86c4-6d8ad48aaea7",
              "title": "ND9990 L03 A13 Demo - Create Serverless Project",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "fup2msAcDS4",
                "china_cdn_id": "fup2msAcDS4.mp4"
              }
            },
            {
              "id": 966250,
              "key": "78f094b9-1679-4b82-abed-75fc124a27bc",
              "title": "Untitled",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "To get a list of the available serverless templates run:\n```bash\nsls create --template\n```\n\nTo create a serverless boilerplate project:\n```\nsls create --template aws-nodejs-typescript --path 10-udagram-app\n```\n\nTo deploy the application:\n\n1. Install the dependencies:\n``` bash\nnpm install\n```\n\n2. Deploy the application\n```bash\nsls deploy -v\n```\n\n**NOTE**: if you get a **permissions error** when you run `deploy` you may need to specify the user profile\n\n\n```bash\nsls deploy -v --aws-profile serverless\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 858189,
          "key": "5bcc88f4-7ea8-4d90-bfc4-3e9025e5d088",
          "title": "Port Get All Groups Demo",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "5bcc88f4-7ea8-4d90-bfc4-3e9025e5d088",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 858148,
              "key": "e93f982d-7457-4962-820a-dfbd908b1ac6",
              "title": "ND9990 L03 A14 Demo - Port Get All Groups API Part 1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "6RnMNdF0U-4",
                "china_cdn_id": "6RnMNdF0U-4.mp4"
              }
            },
            {
              "id": 858131,
              "key": "50bb6f9c-c6dd-4803-a6db-c12d752ccaf3",
              "title": "ND9990 L03 A15 Demo - Port Get All Groups API Part 2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "phpNBWoIRd0",
                "china_cdn_id": "phpNBWoIRd0.mp4"
              }
            },
            {
              "id": 858145,
              "key": "dbf06cd4-2c77-4ea7-a292-7917a02e7080",
              "title": "ND9990 L03 A16 Demo - Port Get All Groups API Part 3",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "0HXC7yMvlHc",
                "china_cdn_id": "0HXC7yMvlHc.mp4"
              }
            }
          ]
        },
        {
          "id": 858194,
          "key": "95d90670-ad54-47b8-a4d8-1a3723d1b787",
          "title": "Demo: Group API",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "95d90670-ad54-47b8-a4d8-1a3723d1b787",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 858177,
              "key": "ec1b9757-1aee-42ac-a529-cb2668195066",
              "title": "ND9990 L03 A17 Demo - Port Create Group API",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "4NCRcXuFfoc",
                "china_cdn_id": "4NCRcXuFfoc.mp4"
              }
            }
          ]
        },
        {
          "id": 858191,
          "key": "d8997215-be7a-4cb4-8c3f-aa5d8f70b099",
          "title": "Validate Requests",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "d8997215-be7a-4cb4-8c3f-aa5d8f70b099",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 858149,
              "key": "55eeb93c-96d3-4012-99a3-753061b47b58",
              "title": "ND9990 L03 A18 Validating Incoming Requests",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "wY0f-e3GOEM",
                "china_cdn_id": "wY0f-e3GOEM.mp4"
              }
            },
            {
              "id": 983039,
              "key": "f0556eab-6dde-41dc-b625-90da44abbc18",
              "title": "Request Validation with API Gateway",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Requests Validation\n\nYou can read more about requests validation with API Gateway in the [official documentation](https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-method-request-validation.html).",
              "instructor_notes": ""
            },
            {
              "id": 858174,
              "key": "030eaf46-dc85-4792-be39-63e0123e3b20",
              "title": "ND9990 L03 A19 JSON Schema",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "rCUDeQzhrsk",
                "china_cdn_id": "rCUDeQzhrsk.mp4"
              }
            },
            {
              "id": 859671,
              "key": "53fb2218-e25c-4dad-85f9-4d5e87313cf6",
              "title": "Untitled",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "If you need a refresher for JSON schema, please do check out at  its [official documentation](https://json-schema.org/) website\n\nJSON schema example:\n\n```json\n{\n  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n  \"title\": \"my-type\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"name\": {\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\"name\"]\n}\n```",
              "instructor_notes": ""
            },
            {
              "id": 858178,
              "key": "4601731f-a9e4-4f6e-8d56-8aeb01e0033a",
              "title": "ND9990 L03 A20 Demo - Validate Incoming Requests V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "mxOgm8ldJKU",
                "china_cdn_id": "mxOgm8ldJKU.mp4"
              }
            },
            {
              "id": 983038,
              "key": "fc2acd35-3233-4d58-bdc8-5b4a00a1f0aa",
              "title": "Validating requests with Serverless framework",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Requests validation is now natively supported by Serverless framework, and there is no need to use any external plugins.\n\nTo enable requests validation one need is to add the following to the serverless.yml:\n\n```yml\n  HttpHandler:\n    handler: src/lambda/http/create.handler\n    events:\n      - http:\n          method: post\n          path: items\n          request:\n            # Schema that will be used to validate incoming requests\n            schema:\n              application/json: ${file(models/create-todo-model.json)}\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 858199,
          "key": "371e13ca-ff2a-4668-809a-0463be904d86",
          "title": "Images API",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "371e13ca-ff2a-4668-809a-0463be904d86",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 858136,
              "key": "6e10560a-b064-4a4b-9ac9-eb1fe63a1fdb",
              "title": "ND9990 L03 A21 What'S Next- (Images API) V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "HyWGggZCCNo",
                "china_cdn_id": "HyWGggZCCNo.mp4"
              }
            },
            {
              "id": 858185,
              "key": "b22dc6d7-0945-4370-9d6b-a411e046e03b",
              "title": "ND9990 L03 A22 DynamoDB Queries V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "jkUvEWl4BrE",
                "china_cdn_id": "jkUvEWl4BrE.mp4"
              }
            },
            {
              "id": 983040,
              "key": "7fe38c5a-851e-402c-85b7-6221a995c1a6",
              "title": "Composite key",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "**Composite key**\n\nA composite key in DynamoDB consists of two elements\n* Partition key - what partition to write item to\n* Sort key - to sort elements with the same partition key\n\nTogether - uniquely identify an item, meaning there can be no two items in a table with the same values of composite key.\n\nNOTE. If a table has a composite key, there can be multiple items with **the same** partition key, providing they have **different** values of sort key.\n\nComposite keys allows to perform queries, that can be used to get a subset of items with a specified partition key.\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 983047,
          "key": "ff78fe40-d035-4eb9-9fde-d9e51e2d24e1",
          "title": "Queries With Node.js",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "ff78fe40-d035-4eb9-9fde-d9e51e2d24e1",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 858163,
              "key": "ccac8aa6-3aed-46c7-a792-c8cc85bb5ccf",
              "title": "ND9990 L03 A23 Queries With Node.Js",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "RRH_AD48rZs",
                "china_cdn_id": "RRH_AD48rZs.mp4"
              }
            },
            {
              "id": 983042,
              "key": "a9b07656-128d-4a1d-9ea9-fa9f4002074f",
              "title": "Queries with Node.js",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "An example of how to send a query to DynamoDB with Node.js\n\n```ts\nconst docClient = new AWS.DynamoDB.DocumentClient()\n\n const result = await docClient.query({\n   TableName: 'GameScore',\n   KeyConditionExpression: 'GameId = :gameId',\n   ExpressionAttributeValues: {\n     ':gameId': '10'\n   }\n }).promise()\n\n const items = result.Items\n```",
              "instructor_notes": ""
            },
            {
              "id": 858140,
              "key": "1fcb046d-5d3f-4d0c-b63b-80810db24f72",
              "title": "ND9990 L03 A24 Path Parameters V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "kiS8HKuL4s0",
                "china_cdn_id": "kiS8HKuL4s0.mp4"
              }
            },
            {
              "id": 983043,
              "key": "1fdd353f-ba05-425b-8675-c741c525667d",
              "title": "Path parameter example",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "**Path parameter**\n\n```yml\nfunctions:\n    GetOrders:\n      handler: src/images.handler\n      events:\n        - http:\n            method: get\n            path: /groups/{groupId}/images\n\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 858190,
          "key": "e583bcc4-2181-4298-9940-173db5e4711a",
          "title": "Demo: get images",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "e583bcc4-2181-4298-9940-173db5e4711a",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 858184,
              "key": "449be940-32a9-4421-a8ef-9267036d2234",
              "title": "ND9990 L03 A25 Demo - Get Images For A Group V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "qHq7G36BgD4",
                "china_cdn_id": "qHq7G36BgD4.mp4"
              }
            }
          ]
        },
        {
          "id": 858192,
          "key": "a6de72ca-d983-4083-946f-dbebebd21419",
          "title": "Indexes in DynamoDB",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "a6de72ca-d983-4083-946f-dbebebd21419",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 858175,
              "key": "bdf882c6-b830-428e-a0b3-a9518ebc00d5",
              "title": "ND9990 L03 A26 Indexes In DynamoDB",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "hmNaEnSZ4uM",
                "china_cdn_id": "hmNaEnSZ4uM.mp4"
              }
            },
            {
              "id": 983041,
              "key": "3b75b39f-2d3d-4862-8714-fdab787c4645",
              "title": "Indexes in DynamoDB",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "*DynamoDB supports two indexes types:*\n\nLocal secondary index (LSI):\n* Like an additional sort key\n* Allows to sort items by a different attribute\n* Added on the data in a table \n\n*Global secondary index (GSI)*\n* Allows to define a new partition key for the same data\n* Allows to define a new partition and sort key for the same data\n* Creates copy of the data in a table (data is available via GSI after some delay)\n\n",
              "instructor_notes": ""
            },
            {
              "id": 858168,
              "key": "c872b60f-63ca-4a13-93ae-a41b0711c9f0",
              "title": "ND9990 L03 A27 Demo - Get Image By ID V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "NuL_FT1DJH0",
                "china_cdn_id": "NuL_FT1DJH0.mp4"
              }
            }
          ]
        },
        {
          "id": 858195,
          "key": "ab70bec0-8047-479b-b37a-646ecfdd4b95",
          "title": "Exercise: Create image record",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "ab70bec0-8047-479b-b37a-646ecfdd4b95",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 858170,
              "key": "dd5c2286-80dd-4470-af61-bb0022c0bca6",
              "title": "ND9990 L03 A28 Exercise - Implement API To Get A Single Group Intro V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "yuHRPmLTqt8",
                "china_cdn_id": "yuHRPmLTqt8.mp4"
              }
            },
            {
              "id": 858613,
              "key": "d96c5c75-1d41-4d7c-9212-9dcb02f9450d",
              "title": "Untitled",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Starter Code\n\nYou can download the starter code here: https://github.com/udacity/cloud-developer/tree/master/course-04/exercises/lesson-3/starter-code\n\n\n## Implementation\n\nIn this exercise, you will have to update a Lambda function that allows creating a new record about a shared image. In this lesson, we will only store metadata about an image, while in the next lesson, we will see how we can upload actual images.\n\nTo implement this exercise, you need to do the following:\n\n* Replace a `TODO: ` statement with code that stores an image item to a DynamoDB table. This should be done similarly to how we store new group items.\n* Add `dynamodb:PutItem` action to the IAM statement to allow a new Lambda function to add new items to the Images table.\n* Add a new model definition to validate a new image. The JSON schema for the new model is already defined in the `models/create-image-request.json` file\n* Add an event definition to the `CreateImage` function. This function should be called when a user sends a `POST` request to `/groups/{groupId}/images`. It should also validate incoming request using the provided model\n\n##  Deployment\n\nTo deploy the whole project, you need to run the following command:\n\n```\nserverless deploy -v\n```\n\nMake sure that the `serverless` command is installed and configured to use correct IAM credentials.\n\nAfter the deployment is finished, you need to create at least one group in the `Groups-dev` table. You can add the following item using the DynamoDB console:\n\n```json\n{\n    \"id\": \"1\",\n    \"name\": \"Dogs\",\n    \"description\": \"Only dog images here!\"\n}\n```\n\n## Expected result\n\nAfter the application is deployed you should be able to send a `POST` request to the following URL: `https://{{apiId}}.execute-api.us-east-1.amazonaws.com/dev/groups/1/images`\n\nAs a body of the request, you can provide the following JSON:\n\n```json\n{\n    \"title\": \"New image\"\n}\n```\n\nNotice that you need to replace `{{apiId}}` with an id of a deployed API (returned as the result of the `serverless` command). Also, make sure that a group with id `1` exists or provide an id of an existing group in the URL of a request you send.\n\nAfter you've executed this request you can check if a new item was added by sending a `GET` request to the following URL: `https://{{apiId}}.execute-api.us-east-1.amazonaws.com/dev/groups/1/images`. The response should include the image that was added using the `POST` request.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 983046,
          "key": "d2f80a20-f84a-4574-8225-52e9d0404109",
          "title": "Exercise Solution",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "d2f80a20-f84a-4574-8225-52e9d0404109",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 966251,
              "key": "887c38af-9f24-4e08-abd9-bde55b945773",
              "title": "Untitled",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## My Solution",
              "instructor_notes": ""
            },
            {
              "id": 858165,
              "key": "6582393e-192a-4caf-9005-308e91a0fb74",
              "title": "ND9990 L03 A29 Exercise - Implement API To Get A Single Group Solution",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "KQn3S4U0cnM",
                "china_cdn_id": "KQn3S4U0cnM.mp4"
              }
            }
          ]
        },
        {
          "id": 858193,
          "key": "62e4f603-336b-4e01-94fb-d6ea49e3d6cf",
          "title": "Summary",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "62e4f603-336b-4e01-94fb-d6ea49e3d6cf",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 858169,
              "key": "c84437c4-1cc4-47b4-b00e-d48175211a17",
              "title": "ND9990 L03 A30 Summary",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "OAvEaCZp2eU",
                "china_cdn_id": "OAvEaCZp2eU.mp4"
              }
            }
          ]
        }
      ]
    }
  }
}