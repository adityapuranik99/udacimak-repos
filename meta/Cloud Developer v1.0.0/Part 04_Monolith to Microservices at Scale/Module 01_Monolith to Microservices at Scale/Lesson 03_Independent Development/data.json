{
  "data": {
    "lesson": {
      "id": 861327,
      "key": "498deace-7f3a-460b-8bb9-9dc4108e9c09",
      "title": "Independent Development",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "In this lesson, you will split our services - \"feed\" and \"user\" into two separate services. ",
      "lesson_type": "Classroom",
      "display_workspace_project_only": false,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "https://zips.udacity-data.com/498deace-7f3a-460b-8bb9-9dc4108e9c09/861327/1575915795532/Independent+Development+Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "https://zips.udacity-data.com/498deace-7f3a-460b-8bb9-9dc4108e9c09/861327/1575915792078/Independent+Development+Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 861328,
          "key": "87ec1c04-75c9-4f80-8372-beb63a2bb4c4",
          "title": "Lesson Intro ",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "87ec1c04-75c9-4f80-8372-beb63a2bb4c4",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 861346,
              "key": "e0fe1bf6-6ff3-42e5-9278-2bd710a372cd",
              "title": "ND9990 C03 L2 Lesson Intro",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "JHiEhXYnS6g",
                "china_cdn_id": "JHiEhXYnS6g.mp4"
              }
            }
          ]
        },
        {
          "id": 861329,
          "key": "44342829-4478-4188-8629-f04feadea953",
          "title": "Udagram Microservice",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "44342829-4478-4188-8629-f04feadea953",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 861349,
              "key": "d0500d64-fc0b-40a0-9550-c1d388eb48bc",
              "title": "ND9990 C03 L2 Udagram Microservice",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "As7nmhnbu7E",
                "china_cdn_id": "As7nmhnbu7E.mp4"
              }
            }
          ]
        },
        {
          "id": 861330,
          "key": "6e6e2c61-13fc-45fe-acfb-4d6047897541",
          "title": "Shared Data Microservice Pattern",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "6e6e2c61-13fc-45fe-acfb-4d6047897541",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 861345,
              "key": "6e59de9d-5f87-4d9c-a8c5-258b6baa52f4",
              "title": "ND9990 C03 L2 Shared Data Microservice Pattern",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "NhwpCVsbFSc",
                "china_cdn_id": "NhwpCVsbFSc.mp4"
              }
            }
          ]
        },
        {
          "id": 861332,
          "key": "1396e79a-8ed6-444c-bf0d-ed71b54836fd",
          "title": "Proxy Pattern",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "1396e79a-8ed6-444c-bf0d-ed71b54836fd",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 861344,
              "key": "f2e15ac5-7ff9-45f5-b366-c9e7dcfa8d58",
              "title": "ND9990 C03 L2 Proxy Pattern",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "E9cit5DBDP0",
                "china_cdn_id": "E9cit5DBDP0.mp4"
              }
            }
          ]
        },
        {
          "id": 861333,
          "key": "e6ef8f80-2c76-40c5-88d2-a5832961c49f",
          "title": "Aggregator Microservice Pattern",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "e6ef8f80-2c76-40c5-88d2-a5832961c49f",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 861340,
              "key": "7af4814a-4782-4465-bcff-806db0d4ad4a",
              "title": "ND9990 C03 L2 Aggregator Microservice Pattern",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "Klwj6U-mczE",
                "china_cdn_id": "Klwj6U-mczE.mp4"
              }
            }
          ]
        },
        {
          "id": 861334,
          "key": "331eb52a-bd42-49c6-b2d4-22f876479a36",
          "title": "Chained Microservice Pattern",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "331eb52a-bd42-49c6-b2d4-22f876479a36",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 861343,
              "key": "88b04bf9-7016-44f1-b794-02a3417efb4d",
              "title": "ND9990 C03 L2 Chained Microservice Pattern",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "ifgm2UURF24",
                "china_cdn_id": "ifgm2UURF24.mp4"
              }
            }
          ]
        },
        {
          "id": 861335,
          "key": "dfb857b4-adfe-4694-ba1e-388f877a3637",
          "title": "Branch Microservice Design Pattern",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "dfb857b4-adfe-4694-ba1e-388f877a3637",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 861342,
              "key": "d76ade5f-c1b7-4f03-8018-85dd6b72661d",
              "title": "ND9990 C03 L2 Branch Microservice Design Pattern",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "7Bs3lEL9MRU",
                "china_cdn_id": "7Bs3lEL9MRU.mp4"
              }
            }
          ]
        },
        {
          "id": 861336,
          "key": "c503cc17-8f75-4659-9194-d946c471a64b",
          "title": "Asynchronous Messaging Microservice Pattern",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "c503cc17-8f75-4659-9194-d946c471a64b",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 861341,
              "key": "89dc9463-2bec-4f14-8938-1a2b4ee9dadc",
              "title": "ND9990 C03 L2 Asynchronous Messaging Microservice Pattern",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "3Gnij9_2GSE",
                "china_cdn_id": "3Gnij9_2GSE.mp4"
              }
            }
          ]
        },
        {
          "id": 861337,
          "key": "c5456f9f-da5a-4798-9c9f-5c656e89a223",
          "title": "Dividing services into multiple services",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "c5456f9f-da5a-4798-9c9f-5c656e89a223",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 900244,
              "key": "7030dbee-94fd-432a-81bf-9c2c26076cc5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Dividing a Service Into Multiple Services\n\nThe goal is to have an independent codebase, which can be developed, tested, and deployed by small teams",
              "instructor_notes": ""
            },
            {
              "id": 861339,
              "key": "a216aa66-ae25-4182-8991-7d61ba7f3e11",
              "title": "ND9990 C03 L2 Dividing Services Into Multiple Services",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "FUjwDlTQycM",
                "china_cdn_id": "FUjwDlTQycM.mp4"
              }
            }
          ]
        },
        {
          "id": 861501,
          "key": "6200ebd4-31fb-4194-acf5-82853635c14f",
          "title": "Exercise: Divide the Backend",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "6200ebd4-31fb-4194-acf5-82853635c14f",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 966804,
              "key": "2e570fbe-b40b-4843-84cf-2daa9618b457",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Lesson 2 - Independent Development - Divide the Backend\nThe exercises in this lesson are an extension of the exercises you have already done in the previous  **\"Lesson 1 - Best Practices for Micro-Services Development\"**.  We will use the same \"Udagram\" project, and convert the monolithic architecture into independent development. *Our goal is to create an independent codebase for each service, that can be developed, tested, and deployed by small teams.*\n\n### Exercise Instructions\n#### Task 1 - Clone the project GitHub repository (if not aleady)\nClone the [course repo](https://github.com/scheeles/cloud-developer) and stay on the `master` branch. **We will use the starter code from the lesson - 1.** \n```bash\ngit clone https://github.com/udacity/nd9990-c3-microservices-v1\ncd nd9990-c3-microservices-v1/\ngit branch\n```\nNavigate to the `/lesson-1-Best-Practices/exercises/` directory.\n\n\n#### Task 2 - Set the User-specific environment variables (if not already)\nLike the last exercise (lesson 1), you'll need to access the AWS RDS database and S3 bucket.  Make sure that the RDS instance is running and that you have defined all of the environment variables in your `./profile` file that is called in the `config.ts`. \n\nIf you need a refresher on how to do this, see the [Handling Secrets with Environment Variables lesson](https://classroom.udacity.com/nanodegrees/nd9990/parts/5d4b2317-8333-47b3-a9ec-ea2cf0a3efbb/modules/ab95831d-3105-400e-9c49-01a9d85e5a65/lessons/9bab122b-1f83-461f-b4dc-f167ab2e9072/concepts/5e27708d-263c-422d-bc56-d4b867691b56 ). \n\n##### Steps to store the environment variables in `.profile` file\nCreate (if not exists) a `.profile` file in `~` or `$HOME` directory to contain the user-specific variables. Follow the below steps: \n* In the `~` directory, run `echo $PATH`. Copy the output.\n* Create a new `.profile` file using `touch .profile`. \n* Open it up for editing using any editor. Add the copied $PATH variable value, for example:\n```bash\nexport PATH=$PATH:/usr/local/mysql/bin/\n```\n* Add the value for other variables specific for you:\n```bash\nexport POSTGRESS_USERNAME=myusername;\nexport POSTGRESS_PASSWORD=mypassword;\nexport POSTGRESS_DB=postgres;\nexport POSTGRESS_HOST=udagramdemo.abc4def.us-east-2.rds.amazonaws.com;\nexport AWS_REGION=us-east-2;\nexport AWS_PROFILE=default;\nexport AWS_BUCKET=udagramdemo;\nexport JWT_SECRET=helloworld;\n```\n**Change the values of the above mentioned variables as applicable for you**. \n\n#### Task 3 - Split the Backend code into two microservices \"feed\" and \"user\"\n1. Make a copy of the `udacity-c3-restapi` and name it `udacity-c3-restapi-feed`.\n2. Rename the original `udacity-c3-restapi` folder `udacity-c3-restapi-user`.\n3. In the `udacity-c3-restapi-user` folder:\n    * Delete the `feed` controller folder\n    * Update `index.router.ts` file to remove the `FeedRouter` router\n    * Update `model.index.ts` to remove the `Feed` model\n\n4. In the `udacity-c3-restapi-feed` folder:\n    * Delete the `user` controller folder\n    * Update `index.router.ts` file to remove the `UserRouter` router\n    * Update `model.index.ts` to remove the `User` model\n\n\n\n#### Task 4 - Run the two microservices  \n1. Navigate and install the dependencies in `udacity-c3-restapi-feed` directory using npm. Then, start the server.\n\n```bash\n# To install the depnedencies\nnpm install\n# To start the backend server\nnpm run dev\n```\n\n2. In a **new** terminal, navigate to the `udacity-c3-frontend` folder, install the dependecies and run the server\n\n```bash\nnpm install\nionic serve\n```\n\n3. Run the application in your browser: [http://localhost:8100/home](http://localhost:8100/home)  \n**Notice that it loads -- but throws an error because the `User` service is not running.**\n\n4. In a **new** terminal, navigate to the `udacity-c3-restapi-user` folder, install the dependencies and run the server\n\n```bash\nnpm install\nnpm run dev\n```\n\n**Now you'll get another error because the `Feed` service is already running on port 8080.**\n\n>[ERROR] 19:33:24 Error: listen EADDRINUSE: address already in use :::8080\n\nIn the next lesson, we'll learn how to use containers to get ***both*** services running simultaneously.\n",
              "instructor_notes": ""
            },
            {
              "id": 966805,
              "key": "d32197a8-2b00-4b50-900d-8ad7acec2a89",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "\n## Solution\n\nYou can find the solution at `https://github.com/udacity/nd9990-c3-microservices-v1/tree/master/lesson-2-Independent-Development/solution`.",
              "instructor_notes": ""
            },
            {
              "id": 861503,
              "key": "15f6d99f-b1d7-4e4a-91cb-05c69527f2ba",
              "title": "Divide the Backend Into Two Microservices",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "15f6d99f-b1d7-4e4a-91cb-05c69527f2ba",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Create a new folder for feed service",
                "Copy the backend service into the the new folders repo",
                "Remove the feed part from the user service",
                "Remove and adjust the user part from the feed service",
                "Start all services locally"
              ],
              "positive_feedback": "Nice work!  We'll learn more about how to get both of our services running in the next lesson",
              "video_feedback": null,
              "description": "Divide the Backend into two microservices feed & user"
            }
          ]
        },
        {
          "id": 861338,
          "key": "463d2aaa-fa97-4d75-8e0c-1c1475fdf748",
          "title": "Lesson Recap",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "463d2aaa-fa97-4d75-8e0c-1c1475fdf748",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 861347,
              "key": "86114d89-1836-406b-a532-e78319f3d977",
              "title": "ND9990 C03 L2 Lesson Recap",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "5Y0u4t4hzZE",
                "china_cdn_id": "5Y0u4t4hzZE.mp4"
              }
            },
            {
              "id": 900265,
              "key": "59167928-a907-4a04-92dd-78672204b900",
              "title": "Design pattern",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "59167928-a907-4a04-92dd-78672204b900",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What microservice design patterns will we use for our Udagram application\n",
                "answers": [
                  {
                    "id": "a1563178312890",
                    "text": "Shared Data Microservice Design Pattern",
                    "is_correct": true
                  },
                  {
                    "id": "a1563178407293",
                    "text": "Proxy Microservice Design Pattern",
                    "is_correct": true
                  },
                  {
                    "id": "a1563178420844",
                    "text": "Aggregator Microservice Design Pattern",
                    "is_correct": false
                  },
                  {
                    "id": "a1563178431284",
                    "text": "Chained Microservice Design Pattern",
                    "is_correct": false
                  },
                  {
                    "id": "a1563178439660",
                    "text": "Branch Microservice Design Pattern",
                    "is_correct": false
                  },
                  {
                    "id": "a1563178447551",
                    "text": "Asynchronous Messaging Microservice Design Pattern",
                    "is_correct": false
                  }
                ]
              }
            }
          ]
        }
      ]
    }
  }
}