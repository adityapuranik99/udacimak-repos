{
  "data": {
    "lesson": {
      "id": 847038,
      "key": "6074169c-aed3-4448-98df-3927a919c664",
      "title": "Refactor Udagram app to Microservices",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "In this project, you will reuse their existing Udagram application and convert and extend into a microservice architecture. ",
      "lesson_type": "Classroom",
      "display_workspace_project_only": false,
      "resources": null,
      "project": {
        "key": "54abf41f-202b-4019-9859-9194b7412e90",
        "version": "1.0.0",
        "locale": "en-us",
        "duration": 30240,
        "semantic_type": "Project",
        "title": "Refactor Udagram app into Microservices and Deploy",
        "description": "In this project, you will apply the skills they have acquired in this cloud engineering course to design, deploy and operate a cloud native photo sharing application. You will reuse their existing midterm application and convert and extend into a microservice architecture. \n \nThe project will highlight the your ability to build microservice and cloud native application.  The process will loosely follow a development flow used by lean, quick start ups.\n\nPlease submit your project with the following:\n* Screenshot of TravisCI which shows the successful build and deploy steps\n* The public GitHub repo and the docker hub images\n* Screenshot of kubectl `get pod` which shows all running containers \n* Screenshot of the application \n\nYour project should meet all rubric requirements to pass the project. The link is provided here: [Project Rubric](https://review.udacity.com/#!/rubrics/2572/view).",
        "is_public": true,
        "summary": null,
        "forum_path": "",
        "rubric_id": "2572",
        "terminal_project_id": null,
        "resources": null,
        "image": null
      },
      "lab": null,
      "concepts": [
        {
          "id": 860741,
          "key": "3d38a746-f1d7-4678-852c-6b72cfdd06ee",
          "title": "Introduction",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "3d38a746-f1d7-4678-852c-6b72cfdd06ee",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 860742,
              "key": "8180e04a-684b-46e8-9bed-c9974eefaec0",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Monolith to Microservices at Scale Project\n---\n\nIn this project, you will apply the skills that you have acquired in this course. The project will highlight your ability to design, deploy, and operate microservices and cloud-native applications.  The process will loosely follow a development flow used by lean, quick start-ups. \n\n#### Overview of the Project Tasks\nYou have to start with the \"Udagram - photo sharing\" Monolith application and divide the application into smaller (micro)services. Each microservice must run in a separate Docker container. These containers (and ReplicaSets) have to be managed by using the Kubernetes cluster. You have to demonstrate the ability to independently scale-up, release, and deploy the project using Kubernetes, and TravisCI. \n\n\n\n\n",
              "instructor_notes": ""
            },
            {
              "id": 860743,
              "key": "c5f19aef-0011-4938-a279-da450584ce1c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "#### Pre-requisites\n* Has experience using Git and GitHub\n* Basic Linux Skills \n* Basic programming skills in Javascript and Python\n* Some familiarity with:\n    * RESTful APIs\n    * Web development (HTML, CSS, DNS)\n\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 860749,
          "key": "bf799f1a-d9df-4eb0-b4a2-0877faeca32a",
          "title": "Project Instructions",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "bf799f1a-d9df-4eb0-b4a2-0877faeca32a",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 860751,
              "key": "ca9660b1-96a9-40dd-8fc9-3800fca3d067",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Starter Repo\n---\n* https://github.com/scheeles/cloud-developer/tree/06-ci/course-03/exercises\n",
              "instructor_notes": ""
            },
            {
              "id": 860752,
              "key": "8907d4a1-e839-4012-a8ab-aff75d7aca1e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### A. Steps to Follow\n---\n1. Divide the application into smaller services\n1. Containerize the application, create the Kubernetes resource, and deploy it to a Kubernetes cluster. \n1. Implement automatic continuous integration (CI) and continuous delivery (CD) using Travis CI.\n1. Extend the application with deployments and be able to do rolling-updates and rollbacks\n\n\n**You can make your project stand out by:**\n* Extend it with additional microservices\n* Running it on multiple servers (scale-up) using Kubernetes\n* Adding monitoring and logging for the application  \n",
              "instructor_notes": ""
            },
            {
              "id": 860750,
              "key": "caea9e78-6e1f-4895-80ec-2de6aecd81d6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### B. Dependencies\n---\n#### Cloud Services\n* Amazon Web Services - Relational Database Services - PostgreSQL\n* Amazon Web Services S3 - Resource hosting and deployments\n* Amazon Web Services - IAM account [applicable only if you host your project on the cloud]\n\nThe following cloud services are optional to use:\n* AWS CloudFront - CDN for SPA\n* AWS EKS - Backend API\n* AWS DynamoDB - Persistent Datastore\n* AWS Cognito - User Authentication\n* AWS CloudWatch - Performance and Health checks\n\n#### DevOps Tools:\n* Kuberntes\n* Docker\n* Travis (CI/CD)\n\n#### Frameworks:\n* Ionic (Javascript) (Frontend)\n* Node.js (Javascript) (Backend)\n\n",
              "instructor_notes": ""
            }
          ]
        }
      ]
    }
  }
}