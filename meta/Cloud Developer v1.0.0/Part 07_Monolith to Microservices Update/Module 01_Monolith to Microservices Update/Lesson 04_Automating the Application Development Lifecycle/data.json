{
  "data": {
    "lesson": {
      "id": 1012862,
      "key": "73ccf61a-83bc-462e-b304-3237c4a071ba",
      "title": "Automating the Application Development Lifecycle",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "In this lesson we'll learn about why the industry embraces _Continuous Integration_ and _Continuous Deployment_ and how Docker helps streamline the process",
      "lesson_type": "Classroom",
      "display_workspace_project_only": false,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "https://zips.udacity-data.com/73ccf61a-83bc-462e-b304-3237c4a071ba/1012862/1586986232116/CI/CD+Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "https://zips.udacity-data.com/73ccf61a-83bc-462e-b304-3237c4a071ba/1012862/1586986227910/CI/CD+Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 1012844,
          "key": "005dda4f-abd8-44a7-bb6a-c2fbbc0667ec",
          "title": "Independent Releases",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "005dda4f-abd8-44a7-bb6a-c2fbbc0667ec",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1012779,
              "key": "90eb6203-d7aa-4726-9d0b-994b4d9ee81d",
              "title": "Independent Releases Heading",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Independent Releases and Deployments",
              "instructor_notes": ""
            },
            {
              "id": 1012784,
              "key": "cdd88f0b-56bd-4d58-90ed-364606d01ada",
              "title": "ND9990 CDND C03 L03 A01 Independent Releases V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "QMzwRrHLTok",
                "china_cdn_id": "QMzwRrHLTok.mp4"
              }
            },
            {
              "id": 1012782,
              "key": "b160bf17-eac6-4b61-8cc4-1d7d05b34746",
              "title": "Lesson Outline",
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/April/5e9235d0_cdnd-c3-l3-lesson-outline/cdnd-c3-l3-lesson-outline.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/b160bf17-eac6-4b61-8cc4-1d7d05b34746",
              "caption": "What We Will Cover in This Lesson",
              "alt": "Lesson Outline: Why CICD is important, Deploying code, Using Travis for continuous integration, Alternative CI tools",
              "width": 770,
              "height": 225,
              "instructor_notes": null
            },
            {
              "id": 1012786,
              "key": "31ec112a-5886-4677-ad8c-fd87cbbdb345",
              "title": "Independent Releases Summary",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "We'll be going over how to streamline the process in how our code gets built and deployed.\r\rWe’ll review:\n1. Why we use deployment pipelines\n2. Best practices for deploying code\n3. Understanding CI/CD\n4. Using Travis as a CI tool integrated with GitHub and DockerHub\n\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 1012854,
          "key": "7d49f2b9-72b0-480b-aeb0-22a812514caf",
          "title": "Why Use Deployment Pipelines?",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "7d49f2b9-72b0-480b-aeb0-22a812514caf",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1012789,
              "key": "317604fc-370c-4a57-9534-f8f99ec00bb1",
              "title": "Why Use Deployment Pipelines? Heading",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Deployment Pipelines",
              "instructor_notes": ""
            },
            {
              "id": 1012788,
              "key": "7922ed49-e0d9-4a82-8ff5-9333fb28eef6",
              "title": "ND9990 CDND C03 L03 A02 Why Use Deployment Pipelines V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "QjQBdK3yWOY",
                "china_cdn_id": "QjQBdK3yWOY.mp4"
              }
            },
            {
              "id": 1012835,
              "key": "59170437-f582-4f0c-b05f-e3590087b420",
              "title": "Why Use Deployment Pipelines? Heading Image",
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/April/5e92360c_cdnd-c3-l3-pipeline/cdnd-c3-l3-pipeline.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/59170437-f582-4f0c-b05f-e3590087b420",
              "caption": "**A deployment pipeline may contain stages for committing, building, testing, and deploying code** ",
              "alt": "A deployment pipeline may contain stages for committing, building, testing, and deploying code",
              "width": 653,
              "height": 161,
              "instructor_notes": null
            },
            {
              "id": 1012787,
              "key": "6de73568-60bf-4f9f-b6dd-d556a930dd82",
              "title": "Why Use Deployment Pipelines? Summary",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "* We now have industry standards and tools for how we can deploy our code.\n* Docker containers simplify _what_ we deploy.\n* Deployment pipelines simplify _how_ we deploy Docker containers.\n* Code is often deployed multiple times to different environments to validate functionality and minimize bugs.\n* Deployment pipelines enable us to have an automated process that is reliable and reproducible.",
              "instructor_notes": ""
            },
            {
              "id": 1012790,
              "key": "2c3074c6-4838-43e3-b762-e5aa6b8844a9",
              "title": "Why Use Deployment Pipelines? Quiz",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "2c3074c6-4838-43e3-b762-e5aa6b8844a9",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which of these are benefits of using an automated process for deploying code?",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "Bug-free code",
                    "is_correct": false
                  },
                  {
                    "id": "rbk2",
                    "text": "Reliable process",
                    "is_correct": true
                  },
                  {
                    "id": "rbk3",
                    "text": "Saves time",
                    "is_correct": true
                  },
                  {
                    "id": "rbk4",
                    "text": "User acceptance testing",
                    "is_correct": false
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1012845,
          "key": "0e2ffe1a-d429-4c74-9a7e-37ac3ab1d1ac",
          "title": "Deploying Code",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "0e2ffe1a-d429-4c74-9a7e-37ac3ab1d1ac",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1012783,
              "key": "9ef94828-7fa1-470f-900c-5e9f0f4980b4",
              "title": "Deploying Code Heading",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Deploying Code",
              "instructor_notes": ""
            },
            {
              "id": 1012792,
              "key": "6efcb176-b3cc-444a-a0df-d87024d26233",
              "title": "ND9990 CDND C03 L03 A03 Deploying Code V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "8nJUChR2Wp4",
                "china_cdn_id": "8nJUChR2Wp4.mp4"
              }
            },
            {
              "id": 1012823,
              "key": "a8487729-9078-4c8b-a67a-2227283ed96f",
              "title": "Deploying Code Summary",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Code After Coding\nOnce your code is done, how do you _ship_ it? Typically, the software development cycle will proceed with building the code, installing all of the dependencies, running automated tests, manually testing, and then repeating for each development environment the application needs to be deployed to.\n\n* It’s a common fallacy to underestimate the time it takes to deploy code\n* Teams deploying enterprise software often involves many internal and external dependencies that may include: infrastructure changes, security changes, permissions provisioning, load testing\n",
              "instructor_notes": ""
            },
            {
              "id": 1012780,
              "key": "0407d7ac-0313-430c-8ea9-6586aa501665",
              "title": "Deploying Code Quiz 1",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "0407d7ac-0313-430c-8ea9-6586aa501665",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What are some difficulties with deploying code?",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "Different deployed environments",
                    "is_correct": true
                  },
                  {
                    "id": "rbk2",
                    "text": "Security restrictions",
                    "is_correct": true
                  },
                  {
                    "id": "rbk3",
                    "text": "Load testing",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 1012796,
              "key": "88dd094a-5755-4ee1-8921-86d3dab70278",
              "title": "Deploying Code Quiz 2",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "88dd094a-5755-4ee1-8921-86d3dab70278",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What are some different skills that are generally different between writing application code and shipping code?",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "Understanding External Dependencies",
                    "is_correct": true
                  },
                  {
                    "id": "rbk2",
                    "text": "Debugging Infrastructure",
                    "is_correct": true
                  },
                  {
                    "id": "rbk3",
                    "text": "Tolerance of Bugs",
                    "is_correct": false
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1012860,
          "key": "797fe44b-ac5a-4225-b569-5657147314b5",
          "title": "CI/CD Benefits",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "797fe44b-ac5a-4225-b569-5657147314b5",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1012791,
              "key": "a30acac5-b444-4f0a-926c-82b8ba258bb1",
              "title": "Understand CI/CD Benefits Heading",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## CI/CD Benefits",
              "instructor_notes": ""
            },
            {
              "id": 1012794,
              "key": "5575e7b6-3b1c-4ef1-ab44-a40adebab44c",
              "title": "ND9990 CDND C03 L03 A04 Understand The CI CD Benefits V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "pxNyDDc4tNU",
                "china_cdn_id": "pxNyDDc4tNU.mp4"
              }
            },
            {
              "id": 1012821,
              "key": "0e8321cf-4ad4-49e7-ba4b-4d7b5442b429",
              "title": "CI CD",
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/April/5e92368e_cdnd-c3-l3-ci-cd/cdnd-c3-l3-ci-cd.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/0e8321cf-4ad4-49e7-ba4b-4d7b5442b429",
              "caption": "CI/CD enables us to have a streamlined process for how our code transforms from being written to being deployed to production.",
              "alt": "CI/CD enables us to have a streamlined process for how our code transforms from being written to being deployed to production.",
              "width": 889,
              "height": 270,
              "instructor_notes": null
            },
            {
              "id": 1012793,
              "key": "9f74bbd4-97e2-4165-97d1-a40ec0ccc168",
              "title": "Understand CI/CD Benefits Notes",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Continuous Integration\nProcess in which code is tested, built into a Docker image, and deployed to a container registry.\n### Continuous Deployment\nProcess in which our Docker image is deployed to containers.\n\n### Additional Benefits\nBy streamlining our build and deploy to an automated process, developers are provided the least privilege that they need to write their code.",
              "instructor_notes": ""
            },
            {
              "id": 1012836,
              "key": "3fcf8916-b65e-410f-8bfb-ec820e8b09e4",
              "title": "Understand CI/CD Benefits New Terms or Vocabulary",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Key Terms - CI/CD\n \n| Term   | Definition |\n|------------------\t|-------------------|\n| Continuous Integration  | practice of streamlining developer code to a centralized source |\n| Continuous Deployment  | practice of streamlining how code is released|\n| Least Privileged Access  | providing the least amount of permissions necessary|\n",
              "instructor_notes": ""
            },
            {
              "id": 1012795,
              "key": "8c76ef77-d161-4df7-9211-bc38ae82928a",
              "title": "Understand CI/CD Benefits Further Research",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Additional Reading\nThe following information is available for further reading on key ideas for deploying code.\n* [Ship Early and Often](https://blog.ycombinator.com/tips-ship-early-and-often/)",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 1012853,
          "key": "bbf78054-2f46-4aec-aee1-e1816a086973",
          "title": "CI/CD Quizzes",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "bbf78054-2f46-4aec-aee1-e1816a086973",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1013064,
              "key": "28480f2c-ef39-42ca-827e-bcfbfaf07173",
              "title": "Continuous Integration/Continuous Deployment",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "28480f2c-ef39-42ca-827e-bcfbfaf07173",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Match properties of _Continuous Integration_ (CI) and _Continuous Deployment (CD).\n"
                },
                "concepts_label": "Property",
                "answers_label": "CI or CD",
                "concepts": [
                  {
                    "text": "\nA new Docker container is created to use the latest Docker image.",
                    "correct_answer": {
                      "id": "a1586661073454",
                      "text": "Continuous Deployment"
                    }
                  },
                  {
                    "text": "Reduce overhead of managing code after development is completed.",
                    "correct_answer": {
                      "id": "a1586661130999",
                      "text": "Both CI and CD"
                    }
                  },
                  {
                    "text": "Code is built automatically into a Docker image.",
                    "correct_answer": {
                      "id": "a1586661131897",
                      "text": "Continuous Integration"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1586661073454",
                    "text": "Continuous Deployment"
                  },
                  {
                    "id": "a1586661131897",
                    "text": "Continuous Integration"
                  },
                  {
                    "id": "a1586661130999",
                    "text": "Both CI and CD"
                  }
                ]
              }
            },
            {
              "id": 1012801,
              "key": "7cd14438-b6a9-4b1e-a5f9-e1ca91d77db7",
              "title": "Understand CI/CD Benefits Hard Quiz",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "7cd14438-b6a9-4b1e-a5f9-e1ca91d77db7",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Why do non-technical individuals at a business care about using CI/CD?",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "Security",
                    "is_correct": true
                  },
                  {
                    "id": "rbk2",
                    "text": "Cost",
                    "is_correct": true
                  },
                  {
                    "id": "rbk3",
                    "text": "Time",
                    "is_correct": true
                  },
                  {
                    "id": "rbk4",
                    "text": "No Bugs",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 1012798,
              "key": "b538e290-13aa-4440-8325-84bb4608528b",
              "title": "ship early ship often heading",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## \"Ship Early, Ship Often\"",
              "instructor_notes": ""
            },
            {
              "id": 1012838,
              "key": "188cc0b4-f4e9-4b80-8332-d8e859290ea3",
              "title": "ND9990 CDND C03 L03 A05 Ship Early Ship Often",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "BpjS2wWWtZE",
                "china_cdn_id": "BpjS2wWWtZE.mp4"
              }
            },
            {
              "id": 1012797,
              "key": "0be0be91-821c-44d7-842d-a69ba4d84647",
              "title": "Ship Early/Ship Option recap",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "###  Key Points  \n\n- CI/CD allows for a tight feedback loop  \n- Bugs are inevitable -- CI/CD helps us identify them in a deployed environment  \n- CI/CD makes the pipeline more available  \n\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 1012848,
          "key": "63d1e240-b863-4763-babe-f2ec3c80f7c1",
          "title": "Exercise: Optimize with CI/CD",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "63d1e240-b863-4763-babe-f2ec3c80f7c1",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1012785,
              "key": "9a410e57-9597-44ca-88b0-94d0441da6e4",
              "title": "Exercise: Optimize with CI/CD Instructions",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Not every company has invested in CI/CD. A classic scenario involves a user connecting directly to a production-facing server with SSH. There, the user will make a backup of the existing code and then use Git to pull the latest code from the master branch onto the machine. Packages and dependencies may be updated to become compatible with the latest version of code.\n\nHow can a defined CI/CD pipeline improve this existing workflow?",
              "instructor_notes": ""
            },
            {
              "id": 1012802,
              "key": "06d14efe-5a1a-4a66-b9a9-b6077124f259",
              "title": "Optimize with CI/CD",
              "semantic_type": "ReflectAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "06d14efe-5a1a-4a66-b9a9-b6077124f259",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "title": "Reflect",
                "semantic_type": "TextQuestion",
                "evaluation_id": null,
                "text": "How can a defined CI/CD pipeline improve this existing workflow?"
              },
              "answer": {
                "text": "Thanks for your response.",
                "video": null
              }
            }
          ]
        },
        {
          "id": 1012849,
          "key": "304d70c5-7c40-4e27-86ce-8e89970a4e94",
          "title": "Solution: Optimize with CI/CD",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "304d70c5-7c40-4e27-86ce-8e89970a4e94",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1012781,
              "key": "f9fe2567-4d6a-4b06-b390-31dbd0bb899b",
              "title": "Solution Heading",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## My Solution",
              "instructor_notes": ""
            },
            {
              "id": 1012799,
              "key": "5179824c-0113-4dad-9571-7b36e7fcb921",
              "title": "ND9990 CDND C03 L03 A06 Solution Optimize With CI CD V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "stn0BRTRFN8",
                "china_cdn_id": "stn0BRTRFN8.mp4"
              }
            },
            {
              "id": 1012800,
              "key": "05da7325-7765-474f-b083-f00047d8f413",
              "title": "Solution: Optimize with CI/CD Summary",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "By using a CI/CD pipeline, we reduce the risk of failed deployments from user error. All of these steps can become automated. If there is an issue with the deployed code, a user can revert the changes with an older container rather than backtracking by using older code and downgrading packages and dependencies.\n* Reduce risk of failed deployments\n* Connecting to a production environment is a security risk\n* Backing up the code is not always a comprehensive backup of the existing state since we may have other dependencies such as databases\n* Packages and dependencies may have to be downgraded and would introduce downtime",
              "instructor_notes": ""
            },
            {
              "id": 1012812,
              "key": "e1636e03-bc3a-4c1c-99ab-89c1499184d5",
              "title": "Reflection on CI/CD Benefits",
              "semantic_type": "ReflectAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "e1636e03-bc3a-4c1c-99ab-89c1499184d5",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "title": "Reflect",
                "semantic_type": "TextQuestion",
                "evaluation_id": null,
                "text": "Think about the last time you had to deploy application code. What were the steps involved? How may the process change for you if these steps were all automated?"
              },
              "answer": {
                "text": "Thanks for your response.",
                "video": null
              }
            }
          ]
        },
        {
          "id": 1012850,
          "key": "07a8252e-1636-41a8-9372-6e94810f1b6e",
          "title": "Using Travis CI",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "07a8252e-1636-41a8-9372-6e94810f1b6e",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1012805,
              "key": "ba2d4bdd-ed2f-4b39-b571-f12abea47530",
              "title": "Using Travis CI Heading",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Travis CI",
              "instructor_notes": ""
            },
            {
              "id": 1012837,
              "key": "3f8041ed-7cbd-4db6-881d-1e8227c4582e",
              "title": "ND9990 CDND C03 L03 A07 Using Travis CI",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "AygZmoeS08U",
                "china_cdn_id": "AygZmoeS08U.mp4"
              }
            },
            {
              "id": 1012816,
              "key": "685d85cb-1049-4f76-8c87-e57c26b58c99",
              "title": "Using Travis CI Notes",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "* Travis is a tool that helps us with the CI process\n* Travis integrates with your application using a YAML file\n* YAML files are often used to specify configurations.\n* Travis can be used to build and push images to DockerHub\n\n### YAML\nYAML is similar to how JSON is also used as a representation of data but YAML is considered more readable. \n* YAML is generally suited for configuration files\n* YAML is generally suited for expressing data.\n\nWhen used as configurations, they are often interchangeable. The examples below show how a YAML file can be represented as JSON.\n```json\n{\n    “course_name”: “Making More Microservices”,\n    “num_students”: 10,\n    “lessons”: {\n        “ci”: {\n            “num_students”: 6\n         },\n        “cd”: {\n\t    “num_students”: 4\n    \t}\n    }\n}\n```\n```yaml\ncourse_name: Making More Microservices\nnum_students: 10\nlessons:\n  ci:\n    num_students: 6\n  cd:\n    num_students: 4\n```\n### Travis File\nThe Travis file is always named `.travis.yaml` and stored in the top-level of your git directory. This is detected by Travis CI and turned into a build pipeline.\n```yaml\nlanguage: node_js\nnode_js:\n  - 13\n\nservices:\n  - docker\n\n# Pre-testing installs\ninstall:\n  - echo \"nothing needs to be installed\"\n\n# Scripts to be run such as tests\nbefore_script:\n  - echo \"no tests\"\n\nscript:\n  - docker --version # print the version for logging\n  - docker build -t simple-node .\n  - docker tag simple-node YOUR_DOCKER_HUB/simple-node:latest\n\n# Tasks to perform after the process is successful. Formatting the Docker username and password as below enables you to programmatically log in without having the password exposed in logs.\nafter_success:\n  - echo \"$DOCKER_PASSWORD\" | docker login -u \"$DOCKER_USERNAME\" --password-stdin\n  - docker push YOUR_DOCKER_HUB/simple-node\n```",
              "instructor_notes": ""
            },
            {
              "id": 1012807,
              "key": "9f91364a-a23b-4576-90c4-601a11786c76",
              "title": "Using Travis CI Heading Image",
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/April/5e923774_cdnd-c3-l3-travis/cdnd-c3-l3-travis.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/9f91364a-a23b-4576-90c4-601a11786c76",
              "caption": "Travis CI serves as the _Continuous Integration_ component of our pipeline.",
              "alt": "Travis CI serves as the _Continuous Integration_ component of our pipeline.",
              "width": 833,
              "height": 228,
              "instructor_notes": null
            },
            {
              "id": 1012811,
              "key": "50e00e89-d044-441d-bd67-e90b35fec6b5",
              "title": "Using Travis CI Heading New Terms",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### New Term\n  \n| Term   | Definition |\n|------------------\t|-------------------|\n| YAML   | _Yet another markup language_ a common way to programmatically write configurations. Sometimes referred to as _YML_. |\n",
              "instructor_notes": ""
            },
            {
              "id": 1012820,
              "key": "1a1c303d-7b79-44c1-b6c3-52788accb366",
              "title": "Using Travis CI Further Research",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Additional Reading\nFor more details about Travis CI functionality:\n* [Travis CI Features](https://docs.travis-ci.com/user/for-beginners/)",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 1012859,
          "key": "80186b1e-f08d-46ef-998b-227fcccdec70",
          "title": "Travis CI Quizzes",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "80186b1e-f08d-46ef-998b-227fcccdec70",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1012804,
              "key": "c424af6d-148e-4ad8-981f-88d3d3a9bbbb",
              "title": "Using Travis CI Easy Quiz",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "c424af6d-148e-4ad8-981f-88d3d3a9bbbb",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What's the purpose of a Travis YML file?",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "Prevent bugs in code",
                    "is_correct": false
                  },
                  {
                    "id": "rbk2",
                    "text": "Specify the CI configurations",
                    "is_correct": true
                  },
                  {
                    "id": "rbk3",
                    "text": "Reduce billing costs",
                    "is_correct": false
                  },
                  {
                    "id": "rbk4",
                    "text": "Reduce security vulnerabilities",
                    "is_correct": false
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1012846,
          "key": "266b00b3-d0f7-4223-9281-5b3b721e3aa0",
          "title": "Exercise: Travis CI",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "266b00b3-d0f7-4223-9281-5b3b721e3aa0",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1012803,
              "key": "0749ac0c-b139-4c70-a63d-ef8d5b819043",
              "title": "Exercise: Travis CI  Instructions",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Using Travis CI",
              "instructor_notes": ""
            },
            {
              "id": 1012824,
              "key": "e79cb5ca-fea9-4fd2-9a88-a98c234f99c1",
              "title": "Travis CI",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "e79cb5ca-fea9-4fd2-9a88-a98c234f99c1",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Create your own GitHub repository with `Simple Node`",
                "Set up Travis account",
                "Integrate GitHub with Travis",
                "Implement Travis YAML file"
              ],
              "positive_feedback": "Nice work! Writing the YAML file contains most of the logic involved in building and pushing images with Travis!",
              "video_feedback": null,
              "description": "Using the [Simple Node](https://github.com/udacity/nd9990-c3-microservices-exercises/tree/master/lesson-3-independent-releases/exercises/travis_ci) project as a starter, set up Travis CI by writing the Travis YAML file that will push Docker images to DockerHub."
            }
          ]
        },
        {
          "id": 1012855,
          "key": "4818c15d-38ff-4c8e-84d5-e7d7e4e8a932",
          "title": "Solution: Travis CI",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "4818c15d-38ff-4c8e-84d5-e7d7e4e8a932",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1012840,
              "key": "218f05b1-69f3-4aab-b6a1-a9bfd2792241",
              "title": "Solution: Travis CI  Heading",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## My Solution",
              "instructor_notes": ""
            },
            {
              "id": 1012809,
              "key": "ccd58fa0-b302-4bb8-bc20-666595655af5",
              "title": "ND9990 CDND C03 L03 A08 Solution Travis CI",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "tMGEOT23Alo",
                "china_cdn_id": "tMGEOT23Alo.mp4"
              }
            },
            {
              "id": 1012806,
              "key": "a64857de-3ee1-48ca-a3df-a2ef115e864c",
              "title": "Solution: Travis CI  Summary",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The completed Travis file should be composed of 4 parts:\n1. `language`\n2. `services`\n3. `before_script`\n4. `script`\n\nThe full solution is shown below:\n```yaml\nlanguage: node_js\nnode_js:\n  - 13\n\nservices:\n  - docker\n\n# Pre-testing installs\ninstall:\n  - echo \"nothing needs to be installed\"\n\n# Scripts to be run such as tests\nbefore_script:\n  - echo \"no tests\"\n\nscript:\n  - docker --version # print the version for logging\n  - docker build -t simple-node .\n  - docker tag simple-node YOUR_DOCKER_HUB/simple-node:latest\n\nafter_success:\n  - echo \"$DOCKER_PASSWORD\" | docker login -u \"$DOCKER_USERNAME\" --password-stdin\n  - docker push YOUR_DOCKER_HUB/simple-node\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 1012858,
          "key": "79342301-9538-4d59-84e1-f691729e4922",
          "title": "Environment Variables with Travis",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "79342301-9538-4d59-84e1-f691729e4922",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1012843,
              "key": "7d42ebe7-1c05-4f2d-a9af-3d9b7807ebb2",
              "title": "Using Environment Variables with Travis Heading",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Using Environment Variables with Travis",
              "instructor_notes": ""
            },
            {
              "id": 1012814,
              "key": "fb15ad2e-d9ec-42c0-aa7a-761e53c2fcc3",
              "title": "ND9990 CDND C03 L03 A10 Environment Variables Demo",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "rr7vYI1s6L0",
                "china_cdn_id": "rr7vYI1s6L0.mp4"
              }
            },
            {
              "id": 1012808,
              "key": "07578fd6-c28e-432b-b967-93027e72342c",
              "title": "Using Environment Variables with Travis Notes",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Environment Variables\nEnvironment variables are a useful way to handle variables that shouldn’t be hard-coded into our application. These values are often credentials that shouldn’t be stored in the code.\n\n### Environment Variables with Travis\nTravis provides a way to set environment variables without having them exposed. These values will be used during the Travis build process.\n1. In your TravisCI dashboard, navigate to a repository\n2. Navigate to the _Settings_ screen\n3. Set values in _Environment Variables_",
              "instructor_notes": ""
            },
            {
              "id": 1012818,
              "key": "b263ed97-d4c2-464a-a704-8e2f5df80720",
              "title": "Using Environment Variables with Travis Image",
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/April/5e923962_cdnd-c3-l3.-ci-tools/cdnd-c3-l3.-ci-tools.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/b263ed97-d4c2-464a-a704-8e2f5df80720",
              "caption": "**Different phases of our software development lifecycle can take advantage of environment variables. Travis, our tool for CI, enables us to set environment variables on a per-repository basis in the settings.**",
              "alt": "Different phases of our software development lifecycle can take advantage of environment variables. Travis, our tool for CI, enables us to set environment variables on a per-repository basis in the settings.",
              "width": 881,
              "height": 172,
              "instructor_notes": null
            },
            {
              "id": 1012834,
              "key": "8c8abf27-a0e8-4365-8dcf-3ffec576582e",
              "title": "Using Environment Variables with Travis Further Research",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Additional Reading\nFor more information about how environment variables can be used with your CI tool:\n* [Best Practices in Securing Your Data](https://docs.travis-ci.com/user/best-practices-security/)",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 1012861,
          "key": "568b58b3-1c06-40e5-a91d-31abf8eeabe9",
          "title": "Environment Variables and Travis Quizzes",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "568b58b3-1c06-40e5-a91d-31abf8eeabe9",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1012833,
              "key": "ec35cd0c-c257-4fc4-8974-5afde929f646",
              "title": "Integrating GitHub with Travis Easy Quiz",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "ec35cd0c-c257-4fc4-8974-5afde929f646",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What are some possible benefits of the ability to configure environment variables per branch in Travis repository’s build process?",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "Push Docker images to a separate, private DockerHub repository for internal testing.",
                    "is_correct": true
                  },
                  {
                    "id": "rbk2",
                    "text": "Improve the build time for our Docker build process.",
                    "is_correct": false
                  },
                  {
                    "id": "rbk3",
                    "text": "Forward log output to a separate flag from our logging service.",
                    "is_correct": true
                  },
                  {
                    "id": "rbk4",
                    "text": "Add more flexibility in our build process by introducing conditionals such as skipping long-running processes to optimize for development time.",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 1012815,
              "key": "ac10b0a8-c05e-4e50-842c-57acb443d563",
              "title": "Integrating GitHub with Travis Hard Quiz",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "ac10b0a8-c05e-4e50-842c-57acb443d563",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Services like Travis have a business model based on the number of builds processed. What are some strategies in setting up your code in Git so that not every push will trigger a build?",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "Manually set up Travis when we want to create a build",
                    "is_correct": false
                  },
                  {
                    "id": "rbk2",
                    "text": "Use a separate branch for different features",
                    "is_correct": true
                  },
                  {
                    "id": "rbk3",
                    "text": "Add the Travis YAML file when we want a build triggered",
                    "is_correct": false
                  },
                  {
                    "id": "rbk4",
                    "text": "Specify what kind of git action should trigger a build",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 1012810,
              "key": "11ded837-ec6f-4431-93b9-cfbced46e45a",
              "title": "## Quiz Solution",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "One strategy is to utilize the master branch for when your code is in a ready state. Use a separate branch while your code is still in active development and before it’s ready to be built into a Docker image. This provides flexibility in how we configure our build process: we can have different branches that Travis won’t automatically build and can have different environment variables configured for different branches.",
              "instructor_notes": ""
            },
            {
              "id": 1012839,
              "key": "86b57545-e11e-4dd1-b9a6-634bbcc364d4",
              "title": "ND9990 CDND C03 L03 A10 Integrating GitHub With Travis Hard Quiz Solution V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "qqJz5uqew6U",
                "china_cdn_id": "qqJz5uqew6U.mp4"
              }
            }
          ]
        },
        {
          "id": 1012847,
          "key": "15859608-9431-42f1-8bef-07fa27c4bff7",
          "title": "Exercise: Environment Variables and Travis",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "15859608-9431-42f1-8bef-07fa27c4bff7",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1012819,
              "key": "7d16bc41-7979-4c33-83de-a7cdee1164c8",
              "title": "Exercise: Environment Variables and Travis Instructions",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Using Environment Variables with Travis  \nWith our exercise, we want to use environment variables as part of the Travis CI build process. Configure the [Simple Node](https://github.com/udacity/nd9990-c3-microservices-exercises/tree/master/lesson-3-independent-releases/exercises/travis_env_var_exercise) project to print out a value that was set as an environment variable.\n\n### Environment Variables in NodeJS Review\nWe can set environment variables locally using the command:\n`export VARIABLE_NAME=VALUE`\n\nFor NodeJS to pick up the environment variable to be used, we use `process.env`.\n\nTo illustrate, if we set an environment variable with `export FAVORITE_FOOD=pizza`, we can programmatically reference the value in NodeJS as follows:\n```javascript\nconst favoriteFood = process.env.FAVORITE_FOOD;\nconsole.log(`My favorite food is ${favoriteFood}`);\n```",
              "instructor_notes": ""
            },
            {
              "id": 1012825,
              "key": "e1255f25-2c8c-4d8d-a566-bc0fae84ae65",
              "title": "Environment Variables and Travis",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "e1255f25-2c8c-4d8d-a566-bc0fae84ae65",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Clone the  [trav_env-var-exercise starter code](https://github.com/udacity/nd9990-c3-microservices-exercises/tree/master/lesson-3-independent-releases/exercises/travis_env_var_exercise)",
                "Update the `server.js` file to print out a value that is set as an environment variable",
                "Create a new GitHub repository for the project (make sure it has a `.travis.yml` file)",
                "Set up Travis CI to use an environment variable"
              ],
              "positive_feedback": "Fantastic work! You’ve set up a build process utilizing environment variables that are populated by Travis CI!",
              "video_feedback": null,
              "description": "Configure the [Simple Node](https://github.com/udacity/nd9990-c3-microservices-exercises/tree/master/lesson-3-independent-releases/exercises/travis_env_var_exercise) project to use at least one environment variable that is populated in the Travis CI build process."
            }
          ]
        },
        {
          "id": 1012857,
          "key": "a561dd59-ae1d-4a63-b217-85baca845c37",
          "title": "Solution: Environment Variables and Travis",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "a561dd59-ae1d-4a63-b217-85baca845c37",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1012829,
              "key": "17d4e426-9df3-4721-a417-f2d9032da73e",
              "title": "Solution: Environment Variables and Travis Heading",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution",
              "instructor_notes": ""
            },
            {
              "id": 1012817,
              "key": "ea34a02d-7c57-4f46-a5a8-864648e99db9",
              "title": "ND9990 CDND C03 L03 A09 Environment Variables With Travis CI",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "b1KvaBNGEhQ",
                "china_cdn_id": "b1KvaBNGEhQ.mp4"
              }
            },
            {
              "id": 1012842,
              "key": "15d06115-e6b2-4ef6-a722-b154adfdb02c",
              "title": "Solution: Environment Variables and Travis Summary",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Recap of our Process\n\n1. I cloned the [trav_env-var-exercise starter code](https://github.com/udacity/nd9990-c3-microservices-exercises/tree/master/lesson-3-independent-releases/exercises/travis_env_var_exercise)\n\n2. I changed `server.js`  to use an environment variable that is pulled as a local variable.  \nI chose to add a variable named `FAVORITE_INSTRUCTOR` -- you might have chosen to create a different variable.\n\n```javascript\n// Set a local variable populated by the environment variable $NAME\nconst FAVORITE_INSTRUCTOR = process.env.NAME;\n\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nasync function main() {\n  while(true) {\n    console.log(`${FAVORITE_INSTRUCTOR} rocks!`);\n    await sleep(5000);\n  }\n}\n\nmain();\n```\n\n3. I set up a new GitHub project with a `.travis.yml` file. In the `.travis.yml`, the `docker build` command has been modified to populate the environment variable. This tells Docker to take the environment variable that Travis had set as an environment variable and set it in the Docker image.\n```\ndocker build -t simple-node --build-arg NAME=${NAME} .\n```\n\n4. I configured the newly-detected repository in Travis to populate the environment variables.\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 1012856,
          "key": "1329b04a-97d9-4098-8762-277dc45885fb",
          "title": "Alternative CI",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "1329b04a-97d9-4098-8762-277dc45885fb",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1012813,
              "key": "de9e5adb-3fc6-4d46-8d8a-a012817b603f",
              "title": "Alternative CI Heading",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Alternative CI/CD Tools",
              "instructor_notes": ""
            },
            {
              "id": 1012826,
              "key": "bce04e06-2103-430a-8b89-9c89d7ba50fa",
              "title": "ND9990 CDND C03 L03 A12 Alternative CI V3",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "xKTces_HaZM",
                "china_cdn_id": "xKTces_HaZM.mp4"
              }
            },
            {
              "id": 1012841,
              "key": "3e74cad2-b7ab-4ebe-8d30-a773970e7cb2",
              "title": "Alternative CI Heading Image",
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/April/5e923f58_cdnd-c3-l3-alt-cli/cdnd-c3-l3-alt-cli.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/3e74cad2-b7ab-4ebe-8d30-a773970e7cb2",
              "caption": "**Travis is only one of many tools used for continuous integration.**",
              "alt": "Travis is only one of many tools used for continuous integration.",
              "width": 897,
              "height": 166,
              "instructor_notes": null
            },
            {
              "id": 1012828,
              "key": "3393d841-2912-4624-babc-6d169f755b3d",
              "title": "Alternative CI Notes",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Docker is more-or-less the defacto standard for containers. Build tools, on the other hand, aren’t as standardized. Travis is one of many CI/CD tools that are popular. Other ones include Jenkins, CircleCI, AWS CodeBuild. You may choose one depending on your business needs.\n* [Jenkins](https://jenkins.io/) - most flexible but more overhead of setup\n* [CircleCI](https://circleci.com/) - alternative to Travis CI with many competing features\n* [AWS CodeBuild](https://aws.amazon.com/codebuild/) - integrates easily with other AWS tools",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 1012851,
          "key": "bbcaef3f-8aef-4fba-8374-1d57a30c93d7",
          "title": "Lesson Recap",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "bbcaef3f-8aef-4fba-8374-1d57a30c93d7",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1012827,
              "key": "a4e438be-308d-4371-b1b9-d27a4c954184",
              "title": "Lesson Recap Heading",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Summary",
              "instructor_notes": ""
            },
            {
              "id": 1012830,
              "key": "fff4715c-5aa5-4362-98e5-db8034f01dad",
              "title": "ND9990 CDND C03 L03 A13 Lesson Recap V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "t2B8FDwWiTE",
                "china_cdn_id": "t2B8FDwWiTE.mp4"
              }
            },
            {
              "id": 1012831,
              "key": "78c5e3a0-8321-43b3-9c42-1a1f1afc1d39",
              "title": "CICD Outline",
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/April/5e923fb0_cdnd-c3-l3-lesson-outline/cdnd-c3-l3-lesson-outline.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/78c5e3a0-8321-43b3-9c42-1a1f1afc1d39",
              "caption": "What We Covered In This Lesson",
              "alt": "Lesson Outline: Why CICD is important, Deploying code, Using Travis for continuous integration, Alternative CI tools\n\n",
              "width": 770,
              "height": 225,
              "instructor_notes": null
            },
            {
              "id": 1012822,
              "key": "625e91a1-269a-4efd-a9e0-16048856b2e4",
              "title": "Lesson Recap Text",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Continuous Integration and Continuous Deployment\n* Why CICD is important\n* Deploying code\n* Using Travis for _continuous integration_\n* Alternative CI tools\n\n### Next Lesson\nIn the next lesson, we’ll tie up our CI/CD pipeline by reviewing the _continuous deployment_ using a powerful tool named Kubernetes.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 1012852,
          "key": "1b54b72e-1675-4ea7-b8bc-752000845ae3",
          "title": "Glossary",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "1b54b72e-1675-4ea7-b8bc-752000845ae3",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1012832,
              "key": "d1e3e873-b593-4167-bed3-09b7f90cf698",
              "title": "Glossary",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### New Terms in This Lesson  \n| Term   | Definition |\n|------------------\t|-------------------|\n| Continuous Integration  | practice of streamlining developer code to a centralized source |\n| Continuous Deployment  | practice of streamlining how code is released|\n| Least Privileged Access  | providing the least amount of permissions necessary|\n| YAML   | _Yet another markup language_ a common way to programmatically write configurations. Sometimes referred to as _YML_. |\n",
              "instructor_notes": ""
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    }
  ]
}