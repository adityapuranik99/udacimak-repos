{
  "data": {
    "lesson": {
      "id": 1010589,
      "key": "d851ee83-9170-4a7f-ac9c-38e97f642553",
      "title": "Microservices Design Principles and Best Practices",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "When applied correctly, microservice architecture can deliver great business value.  In this lesson, we will compare microservices and monoliths and discuss best practices for refactoring.",
      "lesson_type": "Classroom",
      "display_workspace_project_only": false,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "https://zips.udacity-data.com/d851ee83-9170-4a7f-ac9c-38e97f642553/1010589/1586697044791/Building+Microservices+Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "https://zips.udacity-data.com/d851ee83-9170-4a7f-ac9c-38e97f642553/1010589/1586697041212/Building+Microservices+Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 1010577,
          "key": "c52d4982-677d-4a6c-bb2b-17bbd671d538",
          "title": "Intro to Microservices",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "c52d4982-677d-4a6c-bb2b-17bbd671d538",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1010516,
              "key": "881e5996-848b-4745-89ec-4182d8de1268",
              "title": "Intro to Microservices Heading",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Microservice Principles",
              "instructor_notes": ""
            },
            {
              "id": 1010521,
              "key": "218c0d74-e37e-4b6d-9c96-0a5f3d7fef1c",
              "title": "ND9990 CDND C03 L01 A01 Intro To Microservices V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "1xXZcOxTy6w",
                "china_cdn_id": "1xXZcOxTy6w.mp4"
              }
            },
            {
              "id": 1010527,
              "key": "e19fcaf7-85c6-4345-8db2-f530d6599281",
              "title": "Lesson Outline",
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/April/5e8b930d_cdnd-c3-l1-intro/cdnd-c3-l1-intro.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/e19fcaf7-85c6-4345-8db2-f530d6599281",
              "caption": "What We Will Cover In This Lesson",
              "alt": "Monoliths are large applications with many responsibilities while microservices are lean, independent services that make up the application",
              "width": 816,
              "height": 342,
              "instructor_notes": null
            },
            {
              "id": 1010523,
              "key": "cbfd0188-b8f9-4899-8e6a-450f775f66c8",
              "title": "Intro to Microservices Summary",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "* Understand microservice architecture\n* Compare microservices with monoliths\n* Design applications as microservices\n* Systemically refactor monoliths",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 1010583,
          "key": "5146005c-20df-4c05-870b-0221c622a5f3",
          "title": "Monolith vs. Microservices",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "5146005c-20df-4c05-870b-0221c622a5f3",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1010520,
              "key": "0a1495b3-ed41-4b6e-9363-55860808534d",
              "title": "Monolith vs. Microservices Heading",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Key Ideas",
              "instructor_notes": ""
            },
            {
              "id": 1010563,
              "key": "e9f512a8-57ad-402d-9280-33d3ffdca8fc",
              "title": "ND9990 CDND C03 L01 A02 Monolith Vs Mircoservices V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "5lVvXh993wM",
                "china_cdn_id": "5lVvXh993wM.mp4"
              }
            },
            {
              "id": 1010566,
              "key": "d4d9d662-5f90-413a-98a2-c1a68953561d",
              "title": "What Are Microservices Heading Image",
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/April/5e8b933a_cdnd-c3-l1-mono-v-micro/cdnd-c3-l1-mono-v-micro.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/d4d9d662-5f90-413a-98a2-c1a68953561d",
              "caption": "Monoliths vs. Microservices",
              "alt": "Microservices are applications composed of independent services",
              "width": 891,
              "height": 428,
              "instructor_notes": null
            },
            {
              "id": 1010565,
              "key": "7ddc0676-9555-4e99-aa08-c8f245e5cdae",
              "title": "Monolith vs. Microservices Summary",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "* Microservices are an architectural style where an application is composed of modules that can be independently developed and deployed.\n* In monoliths,all the components of the application are built into a single application.\n\n### Microservice Benefits\n- **Scale**  \nLean applications that are able to tailor their logic and infrastructure to their specific business needs. More-easily architected for horizontally-scaling.\n<br>\n- **Development in Parallel**  \nTeams can develop and deploy their own codebases.\n<br>\n- **Cost Effectiveness**    \nUtilize resources only for what is necessary for the specific microservice.\n<br>\n- **Flexibility**\nChoose technologies that make the most sense for the team and business.",
              "instructor_notes": ""
            },
            {
              "id": 1010524,
              "key": "4e2ecea1-4ed2-4260-be08-d5b13419e773",
              "title": "What Are Microservices Quiz",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "4e2ecea1-4ed2-4260-be08-d5b13419e773",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which of the following does not describe a microservice?",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "A single codebase that where updating a trivial line of code requires the entire application to be redeployed.",
                    "is_correct": true
                  },
                  {
                    "id": "rbk2",
                    "text": "A single codebase where teams work independently on their own services.",
                    "is_correct": false
                  },
                  {
                    "id": "rbk3",
                    "text": "Multiple codebases where teams can deploy their code without worrying about bringing down another application.",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 1011490,
              "key": "93ff6d99-40c9-4f33-8976-5695d3c71a06",
              "title": "Monolith vs. Microservices",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "93ff6d99-40c9-4f33-8976-5695d3c71a06",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Match the microservice property with its desired effect."
                },
                "concepts_label": "Effect",
                "answers_label": "Property",
                "concepts": [
                  {
                    "text": "Applications can be built with the tools that fit the job.",
                    "correct_answer": {
                      "id": "a1586398798437",
                      "text": "Flexibility"
                    }
                  },
                  {
                    "text": "Services that have less CPU utilization can be run with less resources.",
                    "correct_answer": {
                      "id": "a1586398836612",
                      "text": "Cost Effectiveness"
                    }
                  },
                  {
                    "text": "Teams can build their applications independently from one another.",
                    "correct_answer": {
                      "id": "a1586398837528",
                      "text": "Development in Parallel"
                    }
                  },
                  {
                    "text": "\nMore machines can be allocated to handle increased demand.",
                    "correct_answer": {
                      "id": "a1586398838381",
                      "text": "Scale"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1586398837528",
                    "text": "Development in Parallel"
                  },
                  {
                    "id": "a1586398798437",
                    "text": "Flexibility"
                  },
                  {
                    "id": "a1586398838381",
                    "text": "Scale"
                  },
                  {
                    "id": "a1586398836612",
                    "text": "Cost Effectiveness"
                  }
                ]
              }
            },
            {
              "id": 1010532,
              "key": "6ac58427-76bc-4e1c-8594-6a6e80200b35",
              "title": "Monolith vs. Microservices Quiz 2",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "6ac58427-76bc-4e1c-8594-6a6e80200b35",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What are properties of a monolith architecture?",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "Single deployment",
                    "is_correct": true
                  },
                  {
                    "id": "rbk2",
                    "text": "Large codebase",
                    "is_correct": false
                  },
                  {
                    "id": "rbk3",
                    "text": "Ease of setup",
                    "is_correct": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1010578,
          "key": "c1bb86d8-f3b6-43ec-a38d-9a94161c91f8",
          "title": "Exercise: Monolith vs. Microservices",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "c1bb86d8-f3b6-43ec-a38d-9a94161c91f8",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1010522,
              "key": "e68c7ec0-39be-40d7-99cf-6ad90a904e2c",
              "title": "Monolith vs. Microservices Exercise Instructions",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Monolith or Microservice?  \n\nWe’ve learned about the tradeoffs of using a monolith architecture versus microservice architecture. Given the following scenarios, which of the following should be built  with microservice architecture and which should be built as a monolith application?\n\nTake your time and think about your response.",
              "instructor_notes": ""
            },
            {
              "id": 1015935,
              "key": "8d8f4d3a-28ea-4747-9d01-d294b74a6d8e",
              "title": "Monolith or Microservices 1",
              "semantic_type": "ReflectAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "8d8f4d3a-28ea-4747-9d01-d294b74a6d8e",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "title": "Reflect",
                "semantic_type": "TextQuestion",
                "evaluation_id": null,
                "text": "You are the lone developer in charge of a small project that isn’t expected to grow in size.\rShould you use monolith or microservice architecture?  Why?"
              },
              "answer": {
                "text": "Thanks for your response.  You can see my response in the next video.",
                "video": null
              }
            },
            {
              "id": 1015937,
              "key": "f22a1ac5-3677-4de3-940a-754fb9cdf88f",
              "title": "Monolith or Microservices 2",
              "semantic_type": "ReflectAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "f22a1ac5-3677-4de3-940a-754fb9cdf88f",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "title": "Reflect",
                "semantic_type": "TextQuestion",
                "evaluation_id": null,
                "text": "An organization wants to build a new platform that involves collaboration between a data team that uses Python and an applications team that uses NodeJS. Should the organization use monolith or microservice architecture?  Why?"
              },
              "answer": {
                "text": "Thanks for your response.  You can see my response in the next video.",
                "video": null
              }
            },
            {
              "id": 1015938,
              "key": "66208f2e-1f82-45bb-ac4b-d4703d151e85",
              "title": "Monolith or Microservices 3",
              "semantic_type": "ReflectAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "66208f2e-1f82-45bb-ac4b-d4703d151e85",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "title": "Reflect",
                "semantic_type": "TextQuestion",
                "evaluation_id": null,
                "text": "You are working for an early-stage startup with constantly changing business requirements. Should your team use monolith or microservice architecture?  Why?"
              },
              "answer": {
                "text": "Thanks for your response.  You can see my response in the next video.",
                "video": null
              }
            },
            {
              "id": 1015934,
              "key": "eee7f20f-a4ad-42d4-bb42-dec15f0b7a0c",
              "title": "Monolith or Microservice 4",
              "semantic_type": "ReflectAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "eee7f20f-a4ad-42d4-bb42-dec15f0b7a0c",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "title": "Reflect",
                "semantic_type": "TextQuestion",
                "evaluation_id": null,
                "text": "You are working with one other developer to build the first iteration of a proof-of-concept application as part of a race to be the first to market. Should you use monolith or microservice architecture?  Why?"
              },
              "answer": {
                "text": "Thanks for your response.  You can see my response in the next video.",
                "video": null
              }
            },
            {
              "id": 1015936,
              "key": "e4cc52d9-45c6-4d92-9150-eb769d3dcd42",
              "title": "Monolith or Microservices 5",
              "semantic_type": "ReflectAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "e4cc52d9-45c6-4d92-9150-eb769d3dcd42",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "title": "Reflect",
                "semantic_type": "TextQuestion",
                "evaluation_id": null,
                "text": "You are working on a hobby project that is very limited in financial resources. Should you use monolith or microservice architecture?  Why?"
              },
              "answer": {
                "text": "Thanks for your response.  You can see my response in the next video.",
                "video": null
              }
            }
          ]
        },
        {
          "id": 1010579,
          "key": "285a3d56-de98-4831-ba1e-98b7ce9dfea5",
          "title": "Solution: Monolith vs. Microservices",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "285a3d56-de98-4831-ba1e-98b7ce9dfea5",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1010526,
              "key": "bc45ead0-7947-49d6-a7af-f4f8f017fed6",
              "title": "ND9990 CDND C03 L01 A03 Monolith Vs Mircoservices Solution",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "pJ6l6YOGcVA",
                "china_cdn_id": "pJ6l6YOGcVA.mp4"
              }
            },
            {
              "id": 1010536,
              "key": "c2c10d91-3de9-44d0-8087-b5be403b7425",
              "title": "Monolith vs. Microservices Solution Summary",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Any application that can be built as a monolith can be built as a microservice. It’s up to you to weigh out the benefits of choosing one over the other. Oftentimes, microservices are harder to manage and take more investment to initially set up.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 1010580,
          "key": "bb67d5dc-1bd5-4d06-9b31-9542e7e37bf5",
          "title": "Microservice Architecture Designs",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "bb67d5dc-1bd5-4d06-9b31-9542e7e37bf5",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1010531,
              "key": "a4da5264-7f0b-4583-b62b-5f2c7d3c419a",
              "title": "Microservice Architecture Designs Heading",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Microservice Architecture Designs",
              "instructor_notes": ""
            },
            {
              "id": 1010514,
              "key": "f799c59d-9965-464f-b866-a4e3d9834493",
              "title": "ND9990 CDND C03 L01 A04 Microservice Architecture Designs V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "9mzGPV2SOZg",
                "china_cdn_id": "9mzGPV2SOZg.mp4"
              }
            },
            {
              "id": 1010528,
              "key": "dae82d7d-1ecb-489c-b794-70fbaedfa0f5",
              "title": "Microservice Architecture Designs Notes",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Properties of Microservices\n#### Communication\n* Services communicate through a network\n* REST is currently the most-commonly used network interface\n\n#### Independently Deployed\n* Deployment to one service should not affect another  \n\n#### Fault tolerant\n* Diligence in writing code that can anticipate when another microservice isn’t working",
              "instructor_notes": ""
            },
            {
              "id": 1010529,
              "key": "aacd0531-a4af-4a4d-8b24-aaaa6f747f87",
              "title": "Microservice Architecture Designs Image",
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/April/5e8e76d5_cdnd-c3-l1-arch-designs/cdnd-c3-l1-arch-designs.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/aacd0531-a4af-4a4d-8b24-aaaa6f747f87",
              "caption": "**Services are independent and communicate through the network**",
              "alt": "Services are independent and communicate through the network",
              "width": 755,
              "height": 504,
              "instructor_notes": null
            },
            {
              "id": 1010530,
              "key": "c23f6e7b-cefe-45e8-a023-415c3a8236cb",
              "title": "Microservice Architecture Designs New Terms or Vocabulary",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Key Terms - Microservices  \n\n\n| Term     \t| Definition  |\n|------------------\t|---------------------|\n| REST  | Architectural style of communication across a network             \t|\n| Fault Tolerance | The ability to continue operating in the event of a failure  \t|\n| Vertical Scaling   | Scaling by increasing the capacity of existing machines \t|\n| Horizontal Scaling \t| Scaling by adding more machines \t|\n\n",
              "instructor_notes": ""
            },
            {
              "id": 1010533,
              "key": "892fa2c9-eef2-4ee0-a9fa-66ea30eedd44",
              "title": "Microservice Architecture Designs Further Research",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Alternatives to REST\nWhile REST is the most popular form of network communication used for microservices, there are many other protocols that can be used. The following are some other ways microservices can communicate with one another:\n* [Publish-Subscribe](https://blog.opto22.com/optoblog/request-response-vs-pub-sub-part-1)\n* [Queues](https://peterdaugaardrasmussen.com/2018/08/27/should-you-use-mq-brokers-or-web-services-and-how-they-are-different/)\n* [gRPC](https://grpc.io/)\n* [SOAP](https://en.wikipedia.org/wiki/SOAP)\n* [GraphQL](https://graphql.org/)\n\n### Other\nThe following has some more context on microservices in greater detail.\n* [More on Microservices](https://martinfowler.com/articles/microservices.html)",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 1010582,
          "key": "dc3848fd-d0ee-46de-bacc-898762205f2e",
          "title": "Microservice Architecture Designs Quizzes",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "dc3848fd-d0ee-46de-bacc-898762205f2e",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1010562,
              "key": "12a13eeb-ed84-4d85-a806-ea6d16c0ab66",
              "title": "Microservice Architecture Designs Easy Quiz",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "12a13eeb-ed84-4d85-a806-ea6d16c0ab66",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which of the following scenarios below describe problems that can occur when software is built as a monolith? (may be more than one answer)",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "A developer fixes a bug. Before deploying, the developer has to schedule a maintenance window for the whole company.",
                    "is_correct": true
                  },
                  {
                    "id": "rbk2",
                    "text": "The application is too slow and can’t be scaled up to meet performance requirements.",
                    "is_correct": false
                  },
                  {
                    "id": "rbk3",
                    "text": "Team A has to wait until Team B is completed with their changes before they can deploy their changes.",
                    "is_correct": true
                  },
                  {
                    "id": "rbk4",
                    "text": "An e-commerce website can’t load because their ads service has a bug.",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 1010537,
              "key": "325cb438-2318-48f4-a8da-06b4b380a39f",
              "title": "Microservice Architecture Designs Hard Quiz",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "325cb438-2318-48f4-a8da-06b4b380a39f",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Restify is a library that is sometimes used with NodeJS to make RESTful API’s easier to implement. Many developers import this library from a package manager into their own projects to simplify their API’s. Is Restify considered a microservice?",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "Yes",
                    "is_correct": false
                  },
                  {
                    "id": "rbk2",
                    "text": "No",
                    "is_correct": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1010584,
          "key": "c55be035-c8b2-46b1-92a0-8d9b332604e1",
          "title": "Exercise: Microservice Architecture Designs",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "c55be035-c8b2-46b1-92a0-8d9b332604e1",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1010534,
              "key": "3dd8a99d-62f3-4d4a-b692-ec22ccfb546e",
              "title": "Microservice Architecture Designs Exercise Instructions",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "It's important to understand what your system may look like after refactoring into a microservice architecture. In practice, we most commonly present to our team an existing architecture diagram and the desired architecture diagram. The team then weighs the benefits and feasibility of the refactor.\n\nGiven the architecture diagram below, create a desired microservice architecture.\n",
              "instructor_notes": ""
            },
            {
              "id": 1010538,
              "key": "6b9d0c75-21d5-4ac6-8dac-d80b39372c76",
              "title": "Monolith Architecture Diagram",
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/April/5e8b966d_cdnd-c3-monolith-diagram/cdnd-c3-monolith-diagram.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/6b9d0c75-21d5-4ac6-8dac-d80b39372c76",
              "caption": "**Monolith Architecture Diagram**",
              "alt": "Monolith Architecture Diagram",
              "width": 812,
              "height": 414,
              "instructor_notes": null
            },
            {
              "id": 1010569,
              "key": "914c3a56-a71c-445e-a867-8fef69b1edec",
              "title": "Microservice Architecture Designs Exercise",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "914c3a56-a71c-445e-a867-8fef69b1edec",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "At least one database",
                "Two separate API’s",
                "Modules separated into their own applications"
              ],
              "positive_feedback": "Nice work! Let’s review the solution.",
              "video_feedback": null,
              "description": "Take apart the monolith application into a potential microservice architecture diagram that includes:"
            }
          ]
        },
        {
          "id": 1010574,
          "key": "1e3d0ff0-c281-48d9-9a53-e6ac6c57a62f",
          "title": "Solution: Microservice Architecture Designs",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "1e3d0ff0-c281-48d9-9a53-e6ac6c57a62f",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1010535,
              "key": "dfa2652b-6388-4fec-a2c1-0a73fa6fb903",
              "title": "ND9990 CDND C03 L01 A05 Solution Microservice Architecture Designs V4",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "5qdlFLMuhs4",
                "china_cdn_id": "5qdlFLMuhs4.mp4"
              }
            },
            {
              "id": 1010539,
              "key": "62090c6e-0a38-4063-b8d0-4b1145089e77",
              "title": "MIcroservice Architecture Designs Solution Image",
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/April/5e8b96c1_cdnd-c3-microservice-diagram/cdnd-c3-microservice-diagram.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/62090c6e-0a38-4063-b8d0-4b1145089e77",
              "caption": "My Solution",
              "alt": "Microservices Diagram",
              "width": 654,
              "height": 414,
              "instructor_notes": null
            },
            {
              "id": 1010515,
              "key": "3c240caf-1b50-4a5b-a4af-c733367c27b8",
              "title": "Microservice Architecture Designs Exercise Solution Summary",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "In software, different forms of designs can meet the same requirements. This means that your software architecture diagram is likely to not look exactly like another that is trying to achieve the same purpose. They may address the same business requirements but some different technologies may be used. Or, they may optimize for different parts of the business such as cost and speed of development.\n\nTo highlight, the solution presented splits the database into two smaller databases. While this ideal, it may not always be feasible to break apart a database due to the table design or time.",
              "instructor_notes": ""
            },
            {
              "id": 1010513,
              "key": "a96f5b72-ec6d-44de-bc14-0d174ebd0999",
              "title": "Considering Microservices",
              "semantic_type": "ReflectAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "a96f5b72-ec6d-44de-bc14-0d174ebd0999",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "title": "Reflect",
                "semantic_type": "TextQuestion",
                "evaluation_id": null,
                "text": "What are some properties that I want to optimize for in my own applications? Explain how properties of microservice architecture can be beneficial or detrimental to my use case?"
              },
              "answer": {
                "text": "Your response may vary depending on the type of application and your work environment. If I was working on a personal project by myself as a hobby, I would want to optimize for ease of use and opt not to break many things apart into small, independent services. I find myself putting personal projects on hold and coming back to them a few months later. If the deployment process is too complicated, I will need to spend a bit of overhead refreshing myself on how to work with deploying the application. I would prefer an application that is easy to develop and deploy.",
                "video": null
              }
            }
          ]
        },
        {
          "id": 1010586,
          "key": "0751cbcc-07c6-4a87-b179-4b930d18f14c",
          "title": "Divide Into Microservices",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "0751cbcc-07c6-4a87-b179-4b930d18f14c",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1010570,
              "key": "c1e04c97-bca6-43da-858f-b800196155cf",
              "title": "Divide an Application into Microservices Heading",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Divide a Monolith Application Into Microservices",
              "instructor_notes": ""
            },
            {
              "id": 1010543,
              "key": "c3ad37c9-1adf-4875-8e42-156fe660aaf7",
              "title": "ND9990 CDND C03 L01 A06 Divide An Application Into Microservices V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "-uVzoBMfz5Y",
                "china_cdn_id": "-uVzoBMfz5Y.mp4"
              }
            },
            {
              "id": 1010517,
              "key": "d793174e-879f-40e8-8a68-149e396da131",
              "title": "Strangler Image heading",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Using the Strangler Pattern  ",
              "instructor_notes": ""
            },
            {
              "id": 1010541,
              "key": "06602fc0-fc94-497f-bc90-357eb18f6ddf",
              "title": "Strangler 1 monolith",
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/April/5e8b9731_cdnd-c3-l1-strangler-1-centered/cdnd-c3-l1-strangler-1-centered.jpeg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/06602fc0-fc94-497f-bc90-357eb18f6ddf",
              "caption": "Monolith Application",
              "alt": "Monolith Application",
              "width": 473,
              "height": 180,
              "instructor_notes": null
            },
            {
              "id": 1010519,
              "key": "a56a4286-3ea0-44ff-83d6-2cb92864cccb",
              "title": "Strangler 2",
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/April/5e8b974a_cdnd-c3-l1-strangler-2-centered/cdnd-c3-l1-strangler-2-centered.jpeg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/a56a4286-3ea0-44ff-83d6-2cb92864cccb",
              "caption": "Step 1: Strangle the Shopping Cart into a Microservice",
              "alt": "Strangle the Cart",
              "width": 687,
              "height": 256,
              "instructor_notes": null
            },
            {
              "id": 1010518,
              "key": "2852a999-6d5c-43fe-ad49-be21bf2e054e",
              "title": "Strangler 3",
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/April/5e8b9760_cdnd-c3-l1-strangler-3-centered/cdnd-c3-l1-strangler-3-centered.jpeg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/2852a999-6d5c-43fe-ad49-be21bf2e054e",
              "caption": "Step 2: Strangle the Catalog into a Microservice",
              "alt": "Strangle the Catalog",
              "width": 717,
              "height": 340,
              "instructor_notes": null
            },
            {
              "id": 1010555,
              "key": "3f7cd1ff-7c32-4b2c-9c67-6f9f4f9dd7e2",
              "title": "Strangler 4",
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/April/5e8b976f_cdnd-c3-l1-strangler-4-centered/cdnd-c3-l1-strangler-4-centered.jpeg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/3f7cd1ff-7c32-4b2c-9c67-6f9f4f9dd7e2",
              "caption": "Step 3: Strangle the Front End into a Microservice",
              "alt": "Strangle the Front End",
              "width": 433,
              "height": 319,
              "instructor_notes": null
            },
            {
              "id": 1010540,
              "key": "406aa207-d037-439d-a007-2646f0958d19",
              "title": "Divide an Application into Microservices Notes",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Map Your Dependencies\n* It's important to understand the application you're working with before breaking it apart.\n* One strategy is to map out the modules and their dependencies as a directed graph to understand the downstream impact of your changes.\n\n### Where to Start?\n* There’s no hard rule: choose the part of the application that makes the most sense to you.\n* Dependency graph serves merely as a guideline on risk based on the number of dependencies.\n* A module with the least dependencies will potentially have the downstream effects meaning less risk.\n\n### How to Start?\n* The _Strangler pattern_ is a common and effective way to migrate legacy applications.\n* Rather than replacing your code with a new version, you can gradually replace components of your application.\n\n### Shared Code\n* Code duplication can be abstracted into common libraries used across projects.",
              "instructor_notes": ""
            },
            {
              "id": 1010542,
              "key": "826127c4-7a17-4a6d-8f33-c12e836743d7",
              "title": "Divide an Application into Microservices Heading New Terms",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Key Terms - Refactoring\n\n\n| Term     \t| Definition  |\n|------------------\t|---------------------|\n| Dependency Graph | A diagram that maps out the relationships between components to understand which parts of the system rely on the other |\n| Module | Program that is logically grouped together to execute a specific functionality   | \n| Strangler Pattern   | Strategy of refactoring code by incrementally replacing components of the codebase |\n| Technical Debt | The concept of choosing an easier implementation of software that will need to be reworked  | \n\n",
              "instructor_notes": ""
            },
            {
              "id": 1010551,
              "key": "0aeab5a1-b91e-4236-bcf1-01d4883427f5",
              "title": "Divide an Application into Microservices Further Research",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Further Reading\nWe went over some strategies and techniques on a high level. Here are some additional resources if you would like to learn more about these topics.\n* [The Strangler Pattern](https://docs.microsoft.com/en-us/azure/architecture/patterns/strangler)\n* [Dependency Graph](https://en.wikipedia.org/wiki/Dependency_graph)",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 1010576,
          "key": "c635fbe9-cceb-43bd-8605-d7d05f068612",
          "title": "Divide Into Microservices Quizzes",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "c635fbe9-cceb-43bd-8605-d7d05f068612",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1010548,
              "key": "c3475702-600f-4a3c-a32d-4214166f02a1",
              "title": "Divide an Application into Microservices Easy Quiz",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "c3475702-600f-4a3c-a32d-4214166f02a1",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What are some ways the _strangler pattern_ can be useful? (may be more than one answer)",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "Enable us to replace our application with a new and improved version with one large refactor.",
                    "is_correct": false
                  },
                  {
                    "id": "rbk2",
                    "text": "Reduce legacy technical debt by starting a brand new project so that the old application can be decommissioned.",
                    "is_correct": false
                  },
                  {
                    "id": "rbk3",
                    "text": "Reduce risk and debugging by localizing all the changes to one part of the application.",
                    "is_correct": true
                  },
                  {
                    "id": "rbk4",
                    "text": "Throttles application traffic so that we can minimize the users affected by deployments.",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 1010546,
              "key": "330e24fe-2dcc-48d0-823b-c80e04fc76e2",
              "title": "Divide an Application into Microservices Hard Quiz",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "330e24fe-2dcc-48d0-823b-c80e04fc76e2",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What are some factors to consider when deciding how to approach refactoring existing code?",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "Cost",
                    "is_correct": true
                  },
                  {
                    "id": "rbk2",
                    "text": "Usage",
                    "is_correct": true
                  },
                  {
                    "id": "rbk3",
                    "text": "Dependencies",
                    "is_correct": true
                  },
                  {
                    "id": "rbk4",
                    "text": "Strangler Pattern",
                    "is_correct": false
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1010575,
          "key": "95b9fcb5-e923-4af9-9cc5-266af008ae57",
          "title": "Exercise: Divide Into Microservices",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "95b9fcb5-e923-4af9-9cc5-266af008ae57",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1010547,
              "key": "938a4555-5186-4a57-b748-040f390be00d",
              "title": "Divide an Application into Microservices Exercise Instructions",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Let's plan for how we can refactor a hypothetical e-commerce monolith application.\n\nBuild a dependency graph of the system below. Then, using the graph and business context, decide what parts of the application would make the most sense to begin refactoring using the _strangler pattern_.\n\n(Hint: there’s no “correct” answer for the dependency graph -- use your intuition to draw the relationships. In practice, we may have to also read through code to build these out!)",
              "instructor_notes": ""
            },
            {
              "id": 1010544,
              "key": "8f69b755-015c-46b2-829c-6e1ceeb22de4",
              "title": "Dependency Graph",
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/April/5e8b964e_cdnd-c3-e-commerce-website-diagram/cdnd-c3-e-commerce-website-diagram.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/8f69b755-015c-46b2-829c-6e1ceeb22de4",
              "caption": "**Architecture of hypothetical e-commerce website**",
              "alt": "Architecture of hypothetical e-commerce website",
              "width": 773,
              "height": 427,
              "instructor_notes": null
            },
            {
              "id": 1010552,
              "key": "ec58b352-58dc-4a10-9ae9-296b01240a86",
              "title": "Divide an Application into Microservices Exercise",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "ec58b352-58dc-4a10-9ae9-296b01240a86",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Build a dependency graph",
                "Decide what service you would first refactor"
              ],
              "positive_feedback": "Great job! Let’s review some possible solutions.",
              "video_feedback": null,
              "description": "What part of the application should we refactor first?"
            }
          ]
        },
        {
          "id": 1010587,
          "key": "291f386b-7b9f-4dc9-8373-85ec009495d9",
          "title": "Solution: Divide Into Microservices",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "291f386b-7b9f-4dc9-8373-85ec009495d9",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1010571,
              "key": "a0266032-f1a7-4d0f-95d4-c6041519a99b",
              "title": "Divide an Application into Microservices Exercise Solution Heading",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution",
              "instructor_notes": ""
            },
            {
              "id": 1010550,
              "key": "fb8c4206-2472-4fef-bc18-76c5e673f6e2",
              "title": "ND9990 CDND C03 L01 A07 Solution Divide An Application Into Microservices-",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "-DgBnCG1NYg",
                "china_cdn_id": "-DgBnCG1NYg.mp4"
              }
            },
            {
              "id": 1010545,
              "key": "9ffd425f-286b-4b4d-9013-4ccba5ea6ac6",
              "title": "Divide an Application image",
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/April/5e8b985a_cdnd-c3-l1-dependency-graph/cdnd-c3-l1-dependency-graph.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/9ffd425f-286b-4b4d-9013-4ccba5ea6ac6",
              "caption": "**Dependency Graph**",
              "alt": "Dependency Graph",
              "width": 564,
              "height": 417,
              "instructor_notes": null
            },
            {
              "id": 1010573,
              "key": "8468cb46-23d6-4681-afea-2fe0472fb586",
              "title": "Divide an Application into Microservices Exercise Solution Summary",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "*  Dependency graphs are one way to help us visualize and make an informed decision\n* We often have to use additional context with regards to business functionality to weigh decisions\n* Database complexity should also be considered for refactors. Services that seem simple may have complicated refactor strategies with their databases.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 1010588,
          "key": "0b110460-0046-4bb6-82d7-d1bbc5823078",
          "title": "Additional Considerations",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "0b110460-0046-4bb6-82d7-d1bbc5823078",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1010560,
              "key": "0b6d7b70-e892-491d-a2a5-8ffad4c1cd30",
              "title": "Additional Considerations Heading",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Additional Considerations",
              "instructor_notes": ""
            },
            {
              "id": 1010554,
              "key": "6af74adb-f0f7-4efc-af2d-b6e42d0f509b",
              "title": "ND9990 CDND C03 L01 A08 Additional Considerations V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "t84xw9eZjZo",
                "china_cdn_id": "t84xw9eZjZo.mp4"
              }
            },
            {
              "id": 1010561,
              "key": "bd645a41-e704-45b8-93c9-04ba9573c5f7",
              "title": "Tradeoffs",
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/April/5e8b9899_cdnd-c3-l1-tradeoffs/cdnd-c3-l1-tradeoffs.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/bd645a41-e704-45b8-93c9-04ba9573c5f7",
              "caption": "Software is About Tradeoffs",
              "alt": "Tradeoffs in software development: databases, cloud etc",
              "width": 668,
              "height": 282,
              "instructor_notes": null
            },
            {
              "id": 1010557,
              "key": "0d43af8d-d07c-409a-ad5e-3f18d949b6d3",
              "title": "Additional Considerations Text",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Summary\n#### Trade-Offs\nDesigning software is not a binary process. There's rarely a right or wrong answer and it's often a decision of balancing both technical and business tradeoffs.\r\rSome trade-offs include\r- Cost of InfrastructureBut \n- Time of Development\n- Managing Technical Debt\n\n\r\n#### Scope of Refactor\nMicroservices may not just be refactoring code. We also need to also consider other parts of the system including databases and infrastructure.",
              "instructor_notes": ""
            },
            {
              "id": 1015288,
              "key": "d024e4b2-d9a5-4478-8a36-c899d1c9347a",
              "title": "Quiz heading",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Quizzes\r\nUse this Dependency Graph to answer the quiz below",
              "instructor_notes": ""
            },
            {
              "id": 1010549,
              "key": "4ccbb2cc-3371-4edc-9fa4-e6cff8640e38",
              "title": "Additional Considerations Quiz Diagram",
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/April/5e8e7759_cdnd-c3-l1-exercise/cdnd-c3-l1-exercise.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/4ccbb2cc-3371-4edc-9fa4-e6cff8640e38",
              "caption": "**Dependency graph of A, B, and C**",
              "alt": "Dependency graph of A, B, and C",
              "width": 1002,
              "height": 690,
              "instructor_notes": null
            },
            {
              "id": 1010558,
              "key": "4458605e-184c-4f91-9e92-46fd72061168",
              "title": "Additional Considerations Intuition Quiz",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "4458605e-184c-4f91-9e92-46fd72061168",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Service A, Service B, and Service C as depicted in the diagram above and represent relatively simple applications. Service A and Service B share many of the same tables in a large database. Given that business requirements dictate that we need to refactor the database, which service would you choose to begin refactoring?",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "System A",
                    "is_correct": false
                  },
                  {
                    "id": "rbk2",
                    "text": "System B",
                    "is_correct": false
                  },
                  {
                    "id": "rbk3",
                    "text": "System C",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 1010572,
              "key": "95da7b6d-74bb-42a1-a468-9d4b3e95129e",
              "title": "Additional Considerations Knowledge Quiz",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "95da7b6d-74bb-42a1-a468-9d4b3e95129e",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What are some considerations when choosing what parts of code to refactor to a microservice?",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "Database complexity",
                    "is_correct": true
                  },
                  {
                    "id": "rbk2",
                    "text": "Dependent services",
                    "is_correct": true
                  },
                  {
                    "id": "rbk3",
                    "text": "REST interface",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 1010568,
              "key": "f58dd18f-8a46-497c-8794-034423d1ed29",
              "title": "Additional Considerations Further Research",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Further Reading\nWe focused on using the _strangler pattern_ for refactoring our application. The following is an article about how we may go about approaching a database refactor:\n* [Refactoring Databases](https://www.martinfowler.com/books/refactoringDatabases.html)\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 1010581,
          "key": "9d413b7f-6806-4155-ab71-9e680e527fe4",
          "title": "Lesson Recap",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "9d413b7f-6806-4155-ab71-9e680e527fe4",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1010559,
              "key": "c847128e-9cd1-4638-a953-880136dfc6ca",
              "title": "Lesson Recap Heading",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Conclusion",
              "instructor_notes": ""
            },
            {
              "id": 1010564,
              "key": "56ef5f31-8e99-4de9-b366-5e09073776b6",
              "title": "ND9990 CDND C03 L01 A09 Lesson Recap V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "9uqPZXXL3OE",
                "china_cdn_id": "9uqPZXXL3OE.mp4"
              }
            },
            {
              "id": 1010553,
              "key": "a6e173dd-372d-484e-b955-bef1eb50df4b",
              "title": "What We Covered",
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/April/5e8b98d1_cdnd-c3-l1-what-covered/cdnd-c3-l1-what-covered.jpeg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/a6e173dd-372d-484e-b955-bef1eb50df4b",
              "caption": "What We Covered",
              "alt": "What we covered in this lesson: Microservice Benefits, Microservices vs Monoliths, Designing Apps as Microservices, Refactoring Monoliths",
              "width": 809,
              "height": 254,
              "instructor_notes": null
            },
            {
              "id": 1010556,
              "key": "5f8e0ed3-408c-40f1-b5c4-29a1c562de6b",
              "title": "Lesson Recap Text",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Microservice Benefits\n* Scale\n* Development in Parallel\n* Cost Effectiveness\n* Flexibility\n\n### Microservice Properties\n* Communication\n* Independently Deployed\n* Fault tolerant\n\n### Refactor Strategies\n* **Dependency Graph** as a starting point to understand downstream effects of modules\n* **Strangler Pattern** as an approach to how we gradually refactor our code in pieces \n\n### Next Lesson\nIn this lesson, we often mentioned how microservices are deployed independently. In the next lesson, we’ll dive into this in greater detail and learn about the industry standard of deploying our code with a technology named Docker.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 1010585,
          "key": "a4bef16d-68ad-4df7-aaf4-8804e1747041",
          "title": "Glossary",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "a4bef16d-68ad-4df7-aaf4-8804e1747041",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1010567,
              "key": "e1e40818-ed73-4d4b-a521-5487586e7815",
              "title": "Glossary",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## New Terms in this Lesson  \n\n\n| Term     \t| Definition  |\n|------------------\t|---------------------|\n| Dependency Graph \t| A diagram that maps out the relationships between components to understand which parts of the system rely on the other \t|\n| Fault Tolerance \t| The ability to continue operating in the event of a failure \t|\n| Horizontal Scaling \t| Scaling by adding more machines \t|\n| Module \t| Program that is logically grouped together to execute a specific functionality \t|\n| REST \t| Architectural style of communication across a network \t|\n| Strangler Pattern \t| Strategy of refactoring code by incrementally replacing components of the codebase \t|  \n| Technical Debt | The concept of choosing an easier implementation of software that will need to be reworked  |  \n| Vertical Scaling \t| Scaling by increasing the capacity of existing machines \t|\n\n",
              "instructor_notes": ""
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    }
  ]
}